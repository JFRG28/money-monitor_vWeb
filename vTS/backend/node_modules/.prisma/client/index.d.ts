
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Gasto
 * 
 */
export type Gasto = $Result.DefaultSelection<Prisma.$GastoPayload>
/**
 * Model Balance
 * 
 */
export type Balance = $Result.DefaultSelection<Prisma.$BalancePayload>
/**
 * Model Deuda
 * 
 */
export type Deuda = $Result.DefaultSelection<Prisma.$DeudaPayload>
/**
 * Model TipoGastoItem
 * 
 */
export type TipoGastoItem = $Result.DefaultSelection<Prisma.$TipoGastoItemPayload>
/**
 * Model FormaPagoItem
 * 
 */
export type FormaPagoItem = $Result.DefaultSelection<Prisma.$FormaPagoItemPayload>
/**
 * Model CategoriaItem
 * 
 */
export type CategoriaItem = $Result.DefaultSelection<Prisma.$CategoriaItemPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Gastos
 * const gastos = await prisma.gasto.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Gastos
   * const gastos = await prisma.gasto.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.gasto`: Exposes CRUD operations for the **Gasto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gastos
    * const gastos = await prisma.gasto.findMany()
    * ```
    */
  get gasto(): Prisma.GastoDelegate<ExtArgs>;

  /**
   * `prisma.balance`: Exposes CRUD operations for the **Balance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Balances
    * const balances = await prisma.balance.findMany()
    * ```
    */
  get balance(): Prisma.BalanceDelegate<ExtArgs>;

  /**
   * `prisma.deuda`: Exposes CRUD operations for the **Deuda** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Deudas
    * const deudas = await prisma.deuda.findMany()
    * ```
    */
  get deuda(): Prisma.DeudaDelegate<ExtArgs>;

  /**
   * `prisma.tipoGastoItem`: Exposes CRUD operations for the **TipoGastoItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TipoGastoItems
    * const tipoGastoItems = await prisma.tipoGastoItem.findMany()
    * ```
    */
  get tipoGastoItem(): Prisma.TipoGastoItemDelegate<ExtArgs>;

  /**
   * `prisma.formaPagoItem`: Exposes CRUD operations for the **FormaPagoItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FormaPagoItems
    * const formaPagoItems = await prisma.formaPagoItem.findMany()
    * ```
    */
  get formaPagoItem(): Prisma.FormaPagoItemDelegate<ExtArgs>;

  /**
   * `prisma.categoriaItem`: Exposes CRUD operations for the **CategoriaItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoriaItems
    * const categoriaItems = await prisma.categoriaItem.findMany()
    * ```
    */
  get categoriaItem(): Prisma.CategoriaItemDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Gasto: 'Gasto',
    Balance: 'Balance',
    Deuda: 'Deuda',
    TipoGastoItem: 'TipoGastoItem',
    FormaPagoItem: 'FormaPagoItem',
    CategoriaItem: 'CategoriaItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "gasto" | "balance" | "deuda" | "tipoGastoItem" | "formaPagoItem" | "categoriaItem"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Gasto: {
        payload: Prisma.$GastoPayload<ExtArgs>
        fields: Prisma.GastoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GastoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GastoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>
          }
          findFirst: {
            args: Prisma.GastoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GastoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>
          }
          findMany: {
            args: Prisma.GastoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>[]
          }
          create: {
            args: Prisma.GastoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>
          }
          createMany: {
            args: Prisma.GastoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GastoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>[]
          }
          delete: {
            args: Prisma.GastoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>
          }
          update: {
            args: Prisma.GastoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>
          }
          deleteMany: {
            args: Prisma.GastoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GastoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GastoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>
          }
          aggregate: {
            args: Prisma.GastoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGasto>
          }
          groupBy: {
            args: Prisma.GastoGroupByArgs<ExtArgs>
            result: $Utils.Optional<GastoGroupByOutputType>[]
          }
          count: {
            args: Prisma.GastoCountArgs<ExtArgs>
            result: $Utils.Optional<GastoCountAggregateOutputType> | number
          }
        }
      }
      Balance: {
        payload: Prisma.$BalancePayload<ExtArgs>
        fields: Prisma.BalanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BalanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BalanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          findFirst: {
            args: Prisma.BalanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BalanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          findMany: {
            args: Prisma.BalanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>[]
          }
          create: {
            args: Prisma.BalanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          createMany: {
            args: Prisma.BalanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BalanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>[]
          }
          delete: {
            args: Prisma.BalanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          update: {
            args: Prisma.BalanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          deleteMany: {
            args: Prisma.BalanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BalanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BalanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePayload>
          }
          aggregate: {
            args: Prisma.BalanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBalance>
          }
          groupBy: {
            args: Prisma.BalanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<BalanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.BalanceCountArgs<ExtArgs>
            result: $Utils.Optional<BalanceCountAggregateOutputType> | number
          }
        }
      }
      Deuda: {
        payload: Prisma.$DeudaPayload<ExtArgs>
        fields: Prisma.DeudaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeudaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeudaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeudaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeudaPayload>
          }
          findFirst: {
            args: Prisma.DeudaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeudaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeudaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeudaPayload>
          }
          findMany: {
            args: Prisma.DeudaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeudaPayload>[]
          }
          create: {
            args: Prisma.DeudaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeudaPayload>
          }
          createMany: {
            args: Prisma.DeudaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeudaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeudaPayload>[]
          }
          delete: {
            args: Prisma.DeudaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeudaPayload>
          }
          update: {
            args: Prisma.DeudaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeudaPayload>
          }
          deleteMany: {
            args: Prisma.DeudaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeudaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DeudaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeudaPayload>
          }
          aggregate: {
            args: Prisma.DeudaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeuda>
          }
          groupBy: {
            args: Prisma.DeudaGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeudaGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeudaCountArgs<ExtArgs>
            result: $Utils.Optional<DeudaCountAggregateOutputType> | number
          }
        }
      }
      TipoGastoItem: {
        payload: Prisma.$TipoGastoItemPayload<ExtArgs>
        fields: Prisma.TipoGastoItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TipoGastoItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoGastoItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TipoGastoItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoGastoItemPayload>
          }
          findFirst: {
            args: Prisma.TipoGastoItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoGastoItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TipoGastoItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoGastoItemPayload>
          }
          findMany: {
            args: Prisma.TipoGastoItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoGastoItemPayload>[]
          }
          create: {
            args: Prisma.TipoGastoItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoGastoItemPayload>
          }
          createMany: {
            args: Prisma.TipoGastoItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TipoGastoItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoGastoItemPayload>[]
          }
          delete: {
            args: Prisma.TipoGastoItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoGastoItemPayload>
          }
          update: {
            args: Prisma.TipoGastoItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoGastoItemPayload>
          }
          deleteMany: {
            args: Prisma.TipoGastoItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TipoGastoItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TipoGastoItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoGastoItemPayload>
          }
          aggregate: {
            args: Prisma.TipoGastoItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTipoGastoItem>
          }
          groupBy: {
            args: Prisma.TipoGastoItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<TipoGastoItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.TipoGastoItemCountArgs<ExtArgs>
            result: $Utils.Optional<TipoGastoItemCountAggregateOutputType> | number
          }
        }
      }
      FormaPagoItem: {
        payload: Prisma.$FormaPagoItemPayload<ExtArgs>
        fields: Prisma.FormaPagoItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FormaPagoItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormaPagoItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FormaPagoItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormaPagoItemPayload>
          }
          findFirst: {
            args: Prisma.FormaPagoItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormaPagoItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FormaPagoItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormaPagoItemPayload>
          }
          findMany: {
            args: Prisma.FormaPagoItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormaPagoItemPayload>[]
          }
          create: {
            args: Prisma.FormaPagoItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormaPagoItemPayload>
          }
          createMany: {
            args: Prisma.FormaPagoItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FormaPagoItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormaPagoItemPayload>[]
          }
          delete: {
            args: Prisma.FormaPagoItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormaPagoItemPayload>
          }
          update: {
            args: Prisma.FormaPagoItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormaPagoItemPayload>
          }
          deleteMany: {
            args: Prisma.FormaPagoItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FormaPagoItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FormaPagoItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormaPagoItemPayload>
          }
          aggregate: {
            args: Prisma.FormaPagoItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFormaPagoItem>
          }
          groupBy: {
            args: Prisma.FormaPagoItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormaPagoItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.FormaPagoItemCountArgs<ExtArgs>
            result: $Utils.Optional<FormaPagoItemCountAggregateOutputType> | number
          }
        }
      }
      CategoriaItem: {
        payload: Prisma.$CategoriaItemPayload<ExtArgs>
        fields: Prisma.CategoriaItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriaItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaItemPayload>
          }
          findFirst: {
            args: Prisma.CategoriaItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaItemPayload>
          }
          findMany: {
            args: Prisma.CategoriaItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaItemPayload>[]
          }
          create: {
            args: Prisma.CategoriaItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaItemPayload>
          }
          createMany: {
            args: Prisma.CategoriaItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoriaItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaItemPayload>[]
          }
          delete: {
            args: Prisma.CategoriaItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaItemPayload>
          }
          update: {
            args: Prisma.CategoriaItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaItemPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoriaItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaItemPayload>
          }
          aggregate: {
            args: Prisma.CategoriaItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoriaItem>
          }
          groupBy: {
            args: Prisma.CategoriaItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriaItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaItemCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriaItemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Gasto
   */

  export type AggregateGasto = {
    _count: GastoCountAggregateOutputType | null
    _avg: GastoAvgAggregateOutputType | null
    _sum: GastoSumAggregateOutputType | null
    _min: GastoMinAggregateOutputType | null
    _max: GastoMaxAggregateOutputType | null
  }

  export type GastoAvgAggregateOutputType = {
    id: number | null
    monto: Decimal | null
    anio: number | null
    no_mens: number | null
    total_meses: number | null
  }

  export type GastoSumAggregateOutputType = {
    id: number | null
    monto: Decimal | null
    anio: number | null
    no_mens: number | null
    total_meses: number | null
  }

  export type GastoMinAggregateOutputType = {
    id: number | null
    concepto: string | null
    monto: Decimal | null
    tipo_gasto: string | null
    forma_pago: string | null
    mes: string | null
    anio: number | null
    fecha_cargo: Date | null
    fecha_pago: Date | null
    categoria: string | null
    a_pagos: boolean | null
    no_mens: number | null
    total_meses: number | null
    tag: string | null
    se_divide: boolean | null
    gasto_x_mes: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type GastoMaxAggregateOutputType = {
    id: number | null
    concepto: string | null
    monto: Decimal | null
    tipo_gasto: string | null
    forma_pago: string | null
    mes: string | null
    anio: number | null
    fecha_cargo: Date | null
    fecha_pago: Date | null
    categoria: string | null
    a_pagos: boolean | null
    no_mens: number | null
    total_meses: number | null
    tag: string | null
    se_divide: boolean | null
    gasto_x_mes: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type GastoCountAggregateOutputType = {
    id: number
    concepto: number
    monto: number
    tipo_gasto: number
    forma_pago: number
    mes: number
    anio: number
    fecha_cargo: number
    fecha_pago: number
    categoria: number
    a_pagos: number
    no_mens: number
    total_meses: number
    tag: number
    se_divide: number
    gasto_x_mes: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type GastoAvgAggregateInputType = {
    id?: true
    monto?: true
    anio?: true
    no_mens?: true
    total_meses?: true
  }

  export type GastoSumAggregateInputType = {
    id?: true
    monto?: true
    anio?: true
    no_mens?: true
    total_meses?: true
  }

  export type GastoMinAggregateInputType = {
    id?: true
    concepto?: true
    monto?: true
    tipo_gasto?: true
    forma_pago?: true
    mes?: true
    anio?: true
    fecha_cargo?: true
    fecha_pago?: true
    categoria?: true
    a_pagos?: true
    no_mens?: true
    total_meses?: true
    tag?: true
    se_divide?: true
    gasto_x_mes?: true
    created_at?: true
    updated_at?: true
  }

  export type GastoMaxAggregateInputType = {
    id?: true
    concepto?: true
    monto?: true
    tipo_gasto?: true
    forma_pago?: true
    mes?: true
    anio?: true
    fecha_cargo?: true
    fecha_pago?: true
    categoria?: true
    a_pagos?: true
    no_mens?: true
    total_meses?: true
    tag?: true
    se_divide?: true
    gasto_x_mes?: true
    created_at?: true
    updated_at?: true
  }

  export type GastoCountAggregateInputType = {
    id?: true
    concepto?: true
    monto?: true
    tipo_gasto?: true
    forma_pago?: true
    mes?: true
    anio?: true
    fecha_cargo?: true
    fecha_pago?: true
    categoria?: true
    a_pagos?: true
    no_mens?: true
    total_meses?: true
    tag?: true
    se_divide?: true
    gasto_x_mes?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type GastoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gasto to aggregate.
     */
    where?: GastoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gastos to fetch.
     */
    orderBy?: GastoOrderByWithRelationInput | GastoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GastoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gastos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gastos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Gastos
    **/
    _count?: true | GastoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GastoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GastoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GastoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GastoMaxAggregateInputType
  }

  export type GetGastoAggregateType<T extends GastoAggregateArgs> = {
        [P in keyof T & keyof AggregateGasto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGasto[P]>
      : GetScalarType<T[P], AggregateGasto[P]>
  }




  export type GastoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GastoWhereInput
    orderBy?: GastoOrderByWithAggregationInput | GastoOrderByWithAggregationInput[]
    by: GastoScalarFieldEnum[] | GastoScalarFieldEnum
    having?: GastoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GastoCountAggregateInputType | true
    _avg?: GastoAvgAggregateInputType
    _sum?: GastoSumAggregateInputType
    _min?: GastoMinAggregateInputType
    _max?: GastoMaxAggregateInputType
  }

  export type GastoGroupByOutputType = {
    id: number
    concepto: string
    monto: Decimal
    tipo_gasto: string
    forma_pago: string
    mes: string
    anio: number
    fecha_cargo: Date
    fecha_pago: Date
    categoria: string
    a_pagos: boolean
    no_mens: number
    total_meses: number
    tag: string
    se_divide: boolean
    gasto_x_mes: string
    created_at: Date
    updated_at: Date
    _count: GastoCountAggregateOutputType | null
    _avg: GastoAvgAggregateOutputType | null
    _sum: GastoSumAggregateOutputType | null
    _min: GastoMinAggregateOutputType | null
    _max: GastoMaxAggregateOutputType | null
  }

  type GetGastoGroupByPayload<T extends GastoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GastoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GastoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GastoGroupByOutputType[P]>
            : GetScalarType<T[P], GastoGroupByOutputType[P]>
        }
      >
    >


  export type GastoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    concepto?: boolean
    monto?: boolean
    tipo_gasto?: boolean
    forma_pago?: boolean
    mes?: boolean
    anio?: boolean
    fecha_cargo?: boolean
    fecha_pago?: boolean
    categoria?: boolean
    a_pagos?: boolean
    no_mens?: boolean
    total_meses?: boolean
    tag?: boolean
    se_divide?: boolean
    gasto_x_mes?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["gasto"]>

  export type GastoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    concepto?: boolean
    monto?: boolean
    tipo_gasto?: boolean
    forma_pago?: boolean
    mes?: boolean
    anio?: boolean
    fecha_cargo?: boolean
    fecha_pago?: boolean
    categoria?: boolean
    a_pagos?: boolean
    no_mens?: boolean
    total_meses?: boolean
    tag?: boolean
    se_divide?: boolean
    gasto_x_mes?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["gasto"]>

  export type GastoSelectScalar = {
    id?: boolean
    concepto?: boolean
    monto?: boolean
    tipo_gasto?: boolean
    forma_pago?: boolean
    mes?: boolean
    anio?: boolean
    fecha_cargo?: boolean
    fecha_pago?: boolean
    categoria?: boolean
    a_pagos?: boolean
    no_mens?: boolean
    total_meses?: boolean
    tag?: boolean
    se_divide?: boolean
    gasto_x_mes?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type $GastoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Gasto"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      concepto: string
      monto: Prisma.Decimal
      tipo_gasto: string
      forma_pago: string
      mes: string
      anio: number
      fecha_cargo: Date
      fecha_pago: Date
      categoria: string
      a_pagos: boolean
      no_mens: number
      total_meses: number
      tag: string
      se_divide: boolean
      gasto_x_mes: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["gasto"]>
    composites: {}
  }

  type GastoGetPayload<S extends boolean | null | undefined | GastoDefaultArgs> = $Result.GetResult<Prisma.$GastoPayload, S>

  type GastoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GastoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GastoCountAggregateInputType | true
    }

  export interface GastoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gasto'], meta: { name: 'Gasto' } }
    /**
     * Find zero or one Gasto that matches the filter.
     * @param {GastoFindUniqueArgs} args - Arguments to find a Gasto
     * @example
     * // Get one Gasto
     * const gasto = await prisma.gasto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GastoFindUniqueArgs>(args: SelectSubset<T, GastoFindUniqueArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Gasto that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GastoFindUniqueOrThrowArgs} args - Arguments to find a Gasto
     * @example
     * // Get one Gasto
     * const gasto = await prisma.gasto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GastoFindUniqueOrThrowArgs>(args: SelectSubset<T, GastoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Gasto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoFindFirstArgs} args - Arguments to find a Gasto
     * @example
     * // Get one Gasto
     * const gasto = await prisma.gasto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GastoFindFirstArgs>(args?: SelectSubset<T, GastoFindFirstArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Gasto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoFindFirstOrThrowArgs} args - Arguments to find a Gasto
     * @example
     * // Get one Gasto
     * const gasto = await prisma.gasto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GastoFindFirstOrThrowArgs>(args?: SelectSubset<T, GastoFindFirstOrThrowArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Gastos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gastos
     * const gastos = await prisma.gasto.findMany()
     * 
     * // Get first 10 Gastos
     * const gastos = await prisma.gasto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gastoWithIdOnly = await prisma.gasto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GastoFindManyArgs>(args?: SelectSubset<T, GastoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Gasto.
     * @param {GastoCreateArgs} args - Arguments to create a Gasto.
     * @example
     * // Create one Gasto
     * const Gasto = await prisma.gasto.create({
     *   data: {
     *     // ... data to create a Gasto
     *   }
     * })
     * 
     */
    create<T extends GastoCreateArgs>(args: SelectSubset<T, GastoCreateArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Gastos.
     * @param {GastoCreateManyArgs} args - Arguments to create many Gastos.
     * @example
     * // Create many Gastos
     * const gasto = await prisma.gasto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GastoCreateManyArgs>(args?: SelectSubset<T, GastoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Gastos and returns the data saved in the database.
     * @param {GastoCreateManyAndReturnArgs} args - Arguments to create many Gastos.
     * @example
     * // Create many Gastos
     * const gasto = await prisma.gasto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Gastos and only return the `id`
     * const gastoWithIdOnly = await prisma.gasto.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GastoCreateManyAndReturnArgs>(args?: SelectSubset<T, GastoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Gasto.
     * @param {GastoDeleteArgs} args - Arguments to delete one Gasto.
     * @example
     * // Delete one Gasto
     * const Gasto = await prisma.gasto.delete({
     *   where: {
     *     // ... filter to delete one Gasto
     *   }
     * })
     * 
     */
    delete<T extends GastoDeleteArgs>(args: SelectSubset<T, GastoDeleteArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Gasto.
     * @param {GastoUpdateArgs} args - Arguments to update one Gasto.
     * @example
     * // Update one Gasto
     * const gasto = await prisma.gasto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GastoUpdateArgs>(args: SelectSubset<T, GastoUpdateArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Gastos.
     * @param {GastoDeleteManyArgs} args - Arguments to filter Gastos to delete.
     * @example
     * // Delete a few Gastos
     * const { count } = await prisma.gasto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GastoDeleteManyArgs>(args?: SelectSubset<T, GastoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gastos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gastos
     * const gasto = await prisma.gasto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GastoUpdateManyArgs>(args: SelectSubset<T, GastoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gasto.
     * @param {GastoUpsertArgs} args - Arguments to update or create a Gasto.
     * @example
     * // Update or create a Gasto
     * const gasto = await prisma.gasto.upsert({
     *   create: {
     *     // ... data to create a Gasto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gasto we want to update
     *   }
     * })
     */
    upsert<T extends GastoUpsertArgs>(args: SelectSubset<T, GastoUpsertArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Gastos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoCountArgs} args - Arguments to filter Gastos to count.
     * @example
     * // Count the number of Gastos
     * const count = await prisma.gasto.count({
     *   where: {
     *     // ... the filter for the Gastos we want to count
     *   }
     * })
    **/
    count<T extends GastoCountArgs>(
      args?: Subset<T, GastoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GastoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gasto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GastoAggregateArgs>(args: Subset<T, GastoAggregateArgs>): Prisma.PrismaPromise<GetGastoAggregateType<T>>

    /**
     * Group by Gasto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GastoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GastoGroupByArgs['orderBy'] }
        : { orderBy?: GastoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GastoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGastoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Gasto model
   */
  readonly fields: GastoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gasto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GastoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Gasto model
   */ 
  interface GastoFieldRefs {
    readonly id: FieldRef<"Gasto", 'Int'>
    readonly concepto: FieldRef<"Gasto", 'String'>
    readonly monto: FieldRef<"Gasto", 'Decimal'>
    readonly tipo_gasto: FieldRef<"Gasto", 'String'>
    readonly forma_pago: FieldRef<"Gasto", 'String'>
    readonly mes: FieldRef<"Gasto", 'String'>
    readonly anio: FieldRef<"Gasto", 'Int'>
    readonly fecha_cargo: FieldRef<"Gasto", 'DateTime'>
    readonly fecha_pago: FieldRef<"Gasto", 'DateTime'>
    readonly categoria: FieldRef<"Gasto", 'String'>
    readonly a_pagos: FieldRef<"Gasto", 'Boolean'>
    readonly no_mens: FieldRef<"Gasto", 'Int'>
    readonly total_meses: FieldRef<"Gasto", 'Int'>
    readonly tag: FieldRef<"Gasto", 'String'>
    readonly se_divide: FieldRef<"Gasto", 'Boolean'>
    readonly gasto_x_mes: FieldRef<"Gasto", 'String'>
    readonly created_at: FieldRef<"Gasto", 'DateTime'>
    readonly updated_at: FieldRef<"Gasto", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Gasto findUnique
   */
  export type GastoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Filter, which Gasto to fetch.
     */
    where: GastoWhereUniqueInput
  }

  /**
   * Gasto findUniqueOrThrow
   */
  export type GastoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Filter, which Gasto to fetch.
     */
    where: GastoWhereUniqueInput
  }

  /**
   * Gasto findFirst
   */
  export type GastoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Filter, which Gasto to fetch.
     */
    where?: GastoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gastos to fetch.
     */
    orderBy?: GastoOrderByWithRelationInput | GastoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gastos.
     */
    cursor?: GastoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gastos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gastos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gastos.
     */
    distinct?: GastoScalarFieldEnum | GastoScalarFieldEnum[]
  }

  /**
   * Gasto findFirstOrThrow
   */
  export type GastoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Filter, which Gasto to fetch.
     */
    where?: GastoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gastos to fetch.
     */
    orderBy?: GastoOrderByWithRelationInput | GastoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gastos.
     */
    cursor?: GastoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gastos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gastos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gastos.
     */
    distinct?: GastoScalarFieldEnum | GastoScalarFieldEnum[]
  }

  /**
   * Gasto findMany
   */
  export type GastoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Filter, which Gastos to fetch.
     */
    where?: GastoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gastos to fetch.
     */
    orderBy?: GastoOrderByWithRelationInput | GastoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Gastos.
     */
    cursor?: GastoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gastos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gastos.
     */
    skip?: number
    distinct?: GastoScalarFieldEnum | GastoScalarFieldEnum[]
  }

  /**
   * Gasto create
   */
  export type GastoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * The data needed to create a Gasto.
     */
    data: XOR<GastoCreateInput, GastoUncheckedCreateInput>
  }

  /**
   * Gasto createMany
   */
  export type GastoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Gastos.
     */
    data: GastoCreateManyInput | GastoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Gasto createManyAndReturn
   */
  export type GastoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Gastos.
     */
    data: GastoCreateManyInput | GastoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Gasto update
   */
  export type GastoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * The data needed to update a Gasto.
     */
    data: XOR<GastoUpdateInput, GastoUncheckedUpdateInput>
    /**
     * Choose, which Gasto to update.
     */
    where: GastoWhereUniqueInput
  }

  /**
   * Gasto updateMany
   */
  export type GastoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Gastos.
     */
    data: XOR<GastoUpdateManyMutationInput, GastoUncheckedUpdateManyInput>
    /**
     * Filter which Gastos to update
     */
    where?: GastoWhereInput
  }

  /**
   * Gasto upsert
   */
  export type GastoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * The filter to search for the Gasto to update in case it exists.
     */
    where: GastoWhereUniqueInput
    /**
     * In case the Gasto found by the `where` argument doesn't exist, create a new Gasto with this data.
     */
    create: XOR<GastoCreateInput, GastoUncheckedCreateInput>
    /**
     * In case the Gasto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GastoUpdateInput, GastoUncheckedUpdateInput>
  }

  /**
   * Gasto delete
   */
  export type GastoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Filter which Gasto to delete.
     */
    where: GastoWhereUniqueInput
  }

  /**
   * Gasto deleteMany
   */
  export type GastoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gastos to delete
     */
    where?: GastoWhereInput
  }

  /**
   * Gasto without action
   */
  export type GastoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
  }


  /**
   * Model Balance
   */

  export type AggregateBalance = {
    _count: BalanceCountAggregateOutputType | null
    _avg: BalanceAvgAggregateOutputType | null
    _sum: BalanceSumAggregateOutputType | null
    _min: BalanceMinAggregateOutputType | null
    _max: BalanceMaxAggregateOutputType | null
  }

  export type BalanceAvgAggregateOutputType = {
    id: number | null
    monto: Decimal | null
    deben_ser: Decimal | null
  }

  export type BalanceSumAggregateOutputType = {
    id: number | null
    monto: Decimal | null
    deben_ser: Decimal | null
  }

  export type BalanceMinAggregateOutputType = {
    id: number | null
    tipo: string | null
    concepto: string | null
    monto: Decimal | null
    deben_ser: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type BalanceMaxAggregateOutputType = {
    id: number | null
    tipo: string | null
    concepto: string | null
    monto: Decimal | null
    deben_ser: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type BalanceCountAggregateOutputType = {
    id: number
    tipo: number
    concepto: number
    monto: number
    deben_ser: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type BalanceAvgAggregateInputType = {
    id?: true
    monto?: true
    deben_ser?: true
  }

  export type BalanceSumAggregateInputType = {
    id?: true
    monto?: true
    deben_ser?: true
  }

  export type BalanceMinAggregateInputType = {
    id?: true
    tipo?: true
    concepto?: true
    monto?: true
    deben_ser?: true
    created_at?: true
    updated_at?: true
  }

  export type BalanceMaxAggregateInputType = {
    id?: true
    tipo?: true
    concepto?: true
    monto?: true
    deben_ser?: true
    created_at?: true
    updated_at?: true
  }

  export type BalanceCountAggregateInputType = {
    id?: true
    tipo?: true
    concepto?: true
    monto?: true
    deben_ser?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type BalanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Balance to aggregate.
     */
    where?: BalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Balances to fetch.
     */
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Balances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Balances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Balances
    **/
    _count?: true | BalanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BalanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BalanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BalanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BalanceMaxAggregateInputType
  }

  export type GetBalanceAggregateType<T extends BalanceAggregateArgs> = {
        [P in keyof T & keyof AggregateBalance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBalance[P]>
      : GetScalarType<T[P], AggregateBalance[P]>
  }




  export type BalanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BalanceWhereInput
    orderBy?: BalanceOrderByWithAggregationInput | BalanceOrderByWithAggregationInput[]
    by: BalanceScalarFieldEnum[] | BalanceScalarFieldEnum
    having?: BalanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BalanceCountAggregateInputType | true
    _avg?: BalanceAvgAggregateInputType
    _sum?: BalanceSumAggregateInputType
    _min?: BalanceMinAggregateInputType
    _max?: BalanceMaxAggregateInputType
  }

  export type BalanceGroupByOutputType = {
    id: number
    tipo: string
    concepto: string
    monto: Decimal
    deben_ser: Decimal
    created_at: Date
    updated_at: Date
    _count: BalanceCountAggregateOutputType | null
    _avg: BalanceAvgAggregateOutputType | null
    _sum: BalanceSumAggregateOutputType | null
    _min: BalanceMinAggregateOutputType | null
    _max: BalanceMaxAggregateOutputType | null
  }

  type GetBalanceGroupByPayload<T extends BalanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BalanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BalanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BalanceGroupByOutputType[P]>
            : GetScalarType<T[P], BalanceGroupByOutputType[P]>
        }
      >
    >


  export type BalanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    concepto?: boolean
    monto?: boolean
    deben_ser?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["balance"]>

  export type BalanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    concepto?: boolean
    monto?: boolean
    deben_ser?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["balance"]>

  export type BalanceSelectScalar = {
    id?: boolean
    tipo?: boolean
    concepto?: boolean
    monto?: boolean
    deben_ser?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type $BalancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Balance"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipo: string
      concepto: string
      monto: Prisma.Decimal
      deben_ser: Prisma.Decimal
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["balance"]>
    composites: {}
  }

  type BalanceGetPayload<S extends boolean | null | undefined | BalanceDefaultArgs> = $Result.GetResult<Prisma.$BalancePayload, S>

  type BalanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BalanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BalanceCountAggregateInputType | true
    }

  export interface BalanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Balance'], meta: { name: 'Balance' } }
    /**
     * Find zero or one Balance that matches the filter.
     * @param {BalanceFindUniqueArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BalanceFindUniqueArgs>(args: SelectSubset<T, BalanceFindUniqueArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Balance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BalanceFindUniqueOrThrowArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BalanceFindUniqueOrThrowArgs>(args: SelectSubset<T, BalanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Balance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceFindFirstArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BalanceFindFirstArgs>(args?: SelectSubset<T, BalanceFindFirstArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Balance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceFindFirstOrThrowArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BalanceFindFirstOrThrowArgs>(args?: SelectSubset<T, BalanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Balances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Balances
     * const balances = await prisma.balance.findMany()
     * 
     * // Get first 10 Balances
     * const balances = await prisma.balance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const balanceWithIdOnly = await prisma.balance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BalanceFindManyArgs>(args?: SelectSubset<T, BalanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Balance.
     * @param {BalanceCreateArgs} args - Arguments to create a Balance.
     * @example
     * // Create one Balance
     * const Balance = await prisma.balance.create({
     *   data: {
     *     // ... data to create a Balance
     *   }
     * })
     * 
     */
    create<T extends BalanceCreateArgs>(args: SelectSubset<T, BalanceCreateArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Balances.
     * @param {BalanceCreateManyArgs} args - Arguments to create many Balances.
     * @example
     * // Create many Balances
     * const balance = await prisma.balance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BalanceCreateManyArgs>(args?: SelectSubset<T, BalanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Balances and returns the data saved in the database.
     * @param {BalanceCreateManyAndReturnArgs} args - Arguments to create many Balances.
     * @example
     * // Create many Balances
     * const balance = await prisma.balance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Balances and only return the `id`
     * const balanceWithIdOnly = await prisma.balance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BalanceCreateManyAndReturnArgs>(args?: SelectSubset<T, BalanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Balance.
     * @param {BalanceDeleteArgs} args - Arguments to delete one Balance.
     * @example
     * // Delete one Balance
     * const Balance = await prisma.balance.delete({
     *   where: {
     *     // ... filter to delete one Balance
     *   }
     * })
     * 
     */
    delete<T extends BalanceDeleteArgs>(args: SelectSubset<T, BalanceDeleteArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Balance.
     * @param {BalanceUpdateArgs} args - Arguments to update one Balance.
     * @example
     * // Update one Balance
     * const balance = await prisma.balance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BalanceUpdateArgs>(args: SelectSubset<T, BalanceUpdateArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Balances.
     * @param {BalanceDeleteManyArgs} args - Arguments to filter Balances to delete.
     * @example
     * // Delete a few Balances
     * const { count } = await prisma.balance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BalanceDeleteManyArgs>(args?: SelectSubset<T, BalanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Balances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Balances
     * const balance = await prisma.balance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BalanceUpdateManyArgs>(args: SelectSubset<T, BalanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Balance.
     * @param {BalanceUpsertArgs} args - Arguments to update or create a Balance.
     * @example
     * // Update or create a Balance
     * const balance = await prisma.balance.upsert({
     *   create: {
     *     // ... data to create a Balance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Balance we want to update
     *   }
     * })
     */
    upsert<T extends BalanceUpsertArgs>(args: SelectSubset<T, BalanceUpsertArgs<ExtArgs>>): Prisma__BalanceClient<$Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Balances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceCountArgs} args - Arguments to filter Balances to count.
     * @example
     * // Count the number of Balances
     * const count = await prisma.balance.count({
     *   where: {
     *     // ... the filter for the Balances we want to count
     *   }
     * })
    **/
    count<T extends BalanceCountArgs>(
      args?: Subset<T, BalanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BalanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Balance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BalanceAggregateArgs>(args: Subset<T, BalanceAggregateArgs>): Prisma.PrismaPromise<GetBalanceAggregateType<T>>

    /**
     * Group by Balance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BalanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BalanceGroupByArgs['orderBy'] }
        : { orderBy?: BalanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BalanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBalanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Balance model
   */
  readonly fields: BalanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Balance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BalanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Balance model
   */ 
  interface BalanceFieldRefs {
    readonly id: FieldRef<"Balance", 'Int'>
    readonly tipo: FieldRef<"Balance", 'String'>
    readonly concepto: FieldRef<"Balance", 'String'>
    readonly monto: FieldRef<"Balance", 'Decimal'>
    readonly deben_ser: FieldRef<"Balance", 'Decimal'>
    readonly created_at: FieldRef<"Balance", 'DateTime'>
    readonly updated_at: FieldRef<"Balance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Balance findUnique
   */
  export type BalanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Filter, which Balance to fetch.
     */
    where: BalanceWhereUniqueInput
  }

  /**
   * Balance findUniqueOrThrow
   */
  export type BalanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Filter, which Balance to fetch.
     */
    where: BalanceWhereUniqueInput
  }

  /**
   * Balance findFirst
   */
  export type BalanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Filter, which Balance to fetch.
     */
    where?: BalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Balances to fetch.
     */
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Balances.
     */
    cursor?: BalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Balances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Balances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Balances.
     */
    distinct?: BalanceScalarFieldEnum | BalanceScalarFieldEnum[]
  }

  /**
   * Balance findFirstOrThrow
   */
  export type BalanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Filter, which Balance to fetch.
     */
    where?: BalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Balances to fetch.
     */
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Balances.
     */
    cursor?: BalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Balances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Balances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Balances.
     */
    distinct?: BalanceScalarFieldEnum | BalanceScalarFieldEnum[]
  }

  /**
   * Balance findMany
   */
  export type BalanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Filter, which Balances to fetch.
     */
    where?: BalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Balances to fetch.
     */
    orderBy?: BalanceOrderByWithRelationInput | BalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Balances.
     */
    cursor?: BalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Balances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Balances.
     */
    skip?: number
    distinct?: BalanceScalarFieldEnum | BalanceScalarFieldEnum[]
  }

  /**
   * Balance create
   */
  export type BalanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * The data needed to create a Balance.
     */
    data: XOR<BalanceCreateInput, BalanceUncheckedCreateInput>
  }

  /**
   * Balance createMany
   */
  export type BalanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Balances.
     */
    data: BalanceCreateManyInput | BalanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Balance createManyAndReturn
   */
  export type BalanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Balances.
     */
    data: BalanceCreateManyInput | BalanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Balance update
   */
  export type BalanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * The data needed to update a Balance.
     */
    data: XOR<BalanceUpdateInput, BalanceUncheckedUpdateInput>
    /**
     * Choose, which Balance to update.
     */
    where: BalanceWhereUniqueInput
  }

  /**
   * Balance updateMany
   */
  export type BalanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Balances.
     */
    data: XOR<BalanceUpdateManyMutationInput, BalanceUncheckedUpdateManyInput>
    /**
     * Filter which Balances to update
     */
    where?: BalanceWhereInput
  }

  /**
   * Balance upsert
   */
  export type BalanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * The filter to search for the Balance to update in case it exists.
     */
    where: BalanceWhereUniqueInput
    /**
     * In case the Balance found by the `where` argument doesn't exist, create a new Balance with this data.
     */
    create: XOR<BalanceCreateInput, BalanceUncheckedCreateInput>
    /**
     * In case the Balance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BalanceUpdateInput, BalanceUncheckedUpdateInput>
  }

  /**
   * Balance delete
   */
  export type BalanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
    /**
     * Filter which Balance to delete.
     */
    where: BalanceWhereUniqueInput
  }

  /**
   * Balance deleteMany
   */
  export type BalanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Balances to delete
     */
    where?: BalanceWhereInput
  }

  /**
   * Balance without action
   */
  export type BalanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Balance
     */
    select?: BalanceSelect<ExtArgs> | null
  }


  /**
   * Model Deuda
   */

  export type AggregateDeuda = {
    _count: DeudaCountAggregateOutputType | null
    _avg: DeudaAvgAggregateOutputType | null
    _sum: DeudaSumAggregateOutputType | null
    _min: DeudaMinAggregateOutputType | null
    _max: DeudaMaxAggregateOutputType | null
  }

  export type DeudaAvgAggregateOutputType = {
    id: number | null
    monto: Decimal | null
  }

  export type DeudaSumAggregateOutputType = {
    id: number | null
    monto: Decimal | null
  }

  export type DeudaMinAggregateOutputType = {
    id: number | null
    tipo: string | null
    item: string | null
    monto: Decimal | null
    fecha: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DeudaMaxAggregateOutputType = {
    id: number | null
    tipo: string | null
    item: string | null
    monto: Decimal | null
    fecha: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DeudaCountAggregateOutputType = {
    id: number
    tipo: number
    item: number
    monto: number
    fecha: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type DeudaAvgAggregateInputType = {
    id?: true
    monto?: true
  }

  export type DeudaSumAggregateInputType = {
    id?: true
    monto?: true
  }

  export type DeudaMinAggregateInputType = {
    id?: true
    tipo?: true
    item?: true
    monto?: true
    fecha?: true
    created_at?: true
    updated_at?: true
  }

  export type DeudaMaxAggregateInputType = {
    id?: true
    tipo?: true
    item?: true
    monto?: true
    fecha?: true
    created_at?: true
    updated_at?: true
  }

  export type DeudaCountAggregateInputType = {
    id?: true
    tipo?: true
    item?: true
    monto?: true
    fecha?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type DeudaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Deuda to aggregate.
     */
    where?: DeudaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deudas to fetch.
     */
    orderBy?: DeudaOrderByWithRelationInput | DeudaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeudaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deudas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deudas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Deudas
    **/
    _count?: true | DeudaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeudaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeudaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeudaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeudaMaxAggregateInputType
  }

  export type GetDeudaAggregateType<T extends DeudaAggregateArgs> = {
        [P in keyof T & keyof AggregateDeuda]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeuda[P]>
      : GetScalarType<T[P], AggregateDeuda[P]>
  }




  export type DeudaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeudaWhereInput
    orderBy?: DeudaOrderByWithAggregationInput | DeudaOrderByWithAggregationInput[]
    by: DeudaScalarFieldEnum[] | DeudaScalarFieldEnum
    having?: DeudaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeudaCountAggregateInputType | true
    _avg?: DeudaAvgAggregateInputType
    _sum?: DeudaSumAggregateInputType
    _min?: DeudaMinAggregateInputType
    _max?: DeudaMaxAggregateInputType
  }

  export type DeudaGroupByOutputType = {
    id: number
    tipo: string
    item: string
    monto: Decimal
    fecha: Date
    created_at: Date
    updated_at: Date
    _count: DeudaCountAggregateOutputType | null
    _avg: DeudaAvgAggregateOutputType | null
    _sum: DeudaSumAggregateOutputType | null
    _min: DeudaMinAggregateOutputType | null
    _max: DeudaMaxAggregateOutputType | null
  }

  type GetDeudaGroupByPayload<T extends DeudaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeudaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeudaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeudaGroupByOutputType[P]>
            : GetScalarType<T[P], DeudaGroupByOutputType[P]>
        }
      >
    >


  export type DeudaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    item?: boolean
    monto?: boolean
    fecha?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["deuda"]>

  export type DeudaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    item?: boolean
    monto?: boolean
    fecha?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["deuda"]>

  export type DeudaSelectScalar = {
    id?: boolean
    tipo?: boolean
    item?: boolean
    monto?: boolean
    fecha?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type $DeudaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Deuda"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipo: string
      item: string
      monto: Prisma.Decimal
      fecha: Date
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["deuda"]>
    composites: {}
  }

  type DeudaGetPayload<S extends boolean | null | undefined | DeudaDefaultArgs> = $Result.GetResult<Prisma.$DeudaPayload, S>

  type DeudaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DeudaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DeudaCountAggregateInputType | true
    }

  export interface DeudaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Deuda'], meta: { name: 'Deuda' } }
    /**
     * Find zero or one Deuda that matches the filter.
     * @param {DeudaFindUniqueArgs} args - Arguments to find a Deuda
     * @example
     * // Get one Deuda
     * const deuda = await prisma.deuda.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeudaFindUniqueArgs>(args: SelectSubset<T, DeudaFindUniqueArgs<ExtArgs>>): Prisma__DeudaClient<$Result.GetResult<Prisma.$DeudaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Deuda that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DeudaFindUniqueOrThrowArgs} args - Arguments to find a Deuda
     * @example
     * // Get one Deuda
     * const deuda = await prisma.deuda.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeudaFindUniqueOrThrowArgs>(args: SelectSubset<T, DeudaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeudaClient<$Result.GetResult<Prisma.$DeudaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Deuda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeudaFindFirstArgs} args - Arguments to find a Deuda
     * @example
     * // Get one Deuda
     * const deuda = await prisma.deuda.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeudaFindFirstArgs>(args?: SelectSubset<T, DeudaFindFirstArgs<ExtArgs>>): Prisma__DeudaClient<$Result.GetResult<Prisma.$DeudaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Deuda that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeudaFindFirstOrThrowArgs} args - Arguments to find a Deuda
     * @example
     * // Get one Deuda
     * const deuda = await prisma.deuda.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeudaFindFirstOrThrowArgs>(args?: SelectSubset<T, DeudaFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeudaClient<$Result.GetResult<Prisma.$DeudaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Deudas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeudaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Deudas
     * const deudas = await prisma.deuda.findMany()
     * 
     * // Get first 10 Deudas
     * const deudas = await prisma.deuda.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deudaWithIdOnly = await prisma.deuda.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DeudaFindManyArgs>(args?: SelectSubset<T, DeudaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeudaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Deuda.
     * @param {DeudaCreateArgs} args - Arguments to create a Deuda.
     * @example
     * // Create one Deuda
     * const Deuda = await prisma.deuda.create({
     *   data: {
     *     // ... data to create a Deuda
     *   }
     * })
     * 
     */
    create<T extends DeudaCreateArgs>(args: SelectSubset<T, DeudaCreateArgs<ExtArgs>>): Prisma__DeudaClient<$Result.GetResult<Prisma.$DeudaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Deudas.
     * @param {DeudaCreateManyArgs} args - Arguments to create many Deudas.
     * @example
     * // Create many Deudas
     * const deuda = await prisma.deuda.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeudaCreateManyArgs>(args?: SelectSubset<T, DeudaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Deudas and returns the data saved in the database.
     * @param {DeudaCreateManyAndReturnArgs} args - Arguments to create many Deudas.
     * @example
     * // Create many Deudas
     * const deuda = await prisma.deuda.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Deudas and only return the `id`
     * const deudaWithIdOnly = await prisma.deuda.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeudaCreateManyAndReturnArgs>(args?: SelectSubset<T, DeudaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeudaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Deuda.
     * @param {DeudaDeleteArgs} args - Arguments to delete one Deuda.
     * @example
     * // Delete one Deuda
     * const Deuda = await prisma.deuda.delete({
     *   where: {
     *     // ... filter to delete one Deuda
     *   }
     * })
     * 
     */
    delete<T extends DeudaDeleteArgs>(args: SelectSubset<T, DeudaDeleteArgs<ExtArgs>>): Prisma__DeudaClient<$Result.GetResult<Prisma.$DeudaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Deuda.
     * @param {DeudaUpdateArgs} args - Arguments to update one Deuda.
     * @example
     * // Update one Deuda
     * const deuda = await prisma.deuda.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeudaUpdateArgs>(args: SelectSubset<T, DeudaUpdateArgs<ExtArgs>>): Prisma__DeudaClient<$Result.GetResult<Prisma.$DeudaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Deudas.
     * @param {DeudaDeleteManyArgs} args - Arguments to filter Deudas to delete.
     * @example
     * // Delete a few Deudas
     * const { count } = await prisma.deuda.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeudaDeleteManyArgs>(args?: SelectSubset<T, DeudaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Deudas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeudaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Deudas
     * const deuda = await prisma.deuda.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeudaUpdateManyArgs>(args: SelectSubset<T, DeudaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Deuda.
     * @param {DeudaUpsertArgs} args - Arguments to update or create a Deuda.
     * @example
     * // Update or create a Deuda
     * const deuda = await prisma.deuda.upsert({
     *   create: {
     *     // ... data to create a Deuda
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Deuda we want to update
     *   }
     * })
     */
    upsert<T extends DeudaUpsertArgs>(args: SelectSubset<T, DeudaUpsertArgs<ExtArgs>>): Prisma__DeudaClient<$Result.GetResult<Prisma.$DeudaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Deudas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeudaCountArgs} args - Arguments to filter Deudas to count.
     * @example
     * // Count the number of Deudas
     * const count = await prisma.deuda.count({
     *   where: {
     *     // ... the filter for the Deudas we want to count
     *   }
     * })
    **/
    count<T extends DeudaCountArgs>(
      args?: Subset<T, DeudaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeudaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Deuda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeudaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeudaAggregateArgs>(args: Subset<T, DeudaAggregateArgs>): Prisma.PrismaPromise<GetDeudaAggregateType<T>>

    /**
     * Group by Deuda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeudaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeudaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeudaGroupByArgs['orderBy'] }
        : { orderBy?: DeudaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeudaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeudaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Deuda model
   */
  readonly fields: DeudaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Deuda.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeudaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Deuda model
   */ 
  interface DeudaFieldRefs {
    readonly id: FieldRef<"Deuda", 'Int'>
    readonly tipo: FieldRef<"Deuda", 'String'>
    readonly item: FieldRef<"Deuda", 'String'>
    readonly monto: FieldRef<"Deuda", 'Decimal'>
    readonly fecha: FieldRef<"Deuda", 'DateTime'>
    readonly created_at: FieldRef<"Deuda", 'DateTime'>
    readonly updated_at: FieldRef<"Deuda", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Deuda findUnique
   */
  export type DeudaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deuda
     */
    select?: DeudaSelect<ExtArgs> | null
    /**
     * Filter, which Deuda to fetch.
     */
    where: DeudaWhereUniqueInput
  }

  /**
   * Deuda findUniqueOrThrow
   */
  export type DeudaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deuda
     */
    select?: DeudaSelect<ExtArgs> | null
    /**
     * Filter, which Deuda to fetch.
     */
    where: DeudaWhereUniqueInput
  }

  /**
   * Deuda findFirst
   */
  export type DeudaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deuda
     */
    select?: DeudaSelect<ExtArgs> | null
    /**
     * Filter, which Deuda to fetch.
     */
    where?: DeudaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deudas to fetch.
     */
    orderBy?: DeudaOrderByWithRelationInput | DeudaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Deudas.
     */
    cursor?: DeudaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deudas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deudas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Deudas.
     */
    distinct?: DeudaScalarFieldEnum | DeudaScalarFieldEnum[]
  }

  /**
   * Deuda findFirstOrThrow
   */
  export type DeudaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deuda
     */
    select?: DeudaSelect<ExtArgs> | null
    /**
     * Filter, which Deuda to fetch.
     */
    where?: DeudaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deudas to fetch.
     */
    orderBy?: DeudaOrderByWithRelationInput | DeudaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Deudas.
     */
    cursor?: DeudaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deudas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deudas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Deudas.
     */
    distinct?: DeudaScalarFieldEnum | DeudaScalarFieldEnum[]
  }

  /**
   * Deuda findMany
   */
  export type DeudaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deuda
     */
    select?: DeudaSelect<ExtArgs> | null
    /**
     * Filter, which Deudas to fetch.
     */
    where?: DeudaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deudas to fetch.
     */
    orderBy?: DeudaOrderByWithRelationInput | DeudaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Deudas.
     */
    cursor?: DeudaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deudas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deudas.
     */
    skip?: number
    distinct?: DeudaScalarFieldEnum | DeudaScalarFieldEnum[]
  }

  /**
   * Deuda create
   */
  export type DeudaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deuda
     */
    select?: DeudaSelect<ExtArgs> | null
    /**
     * The data needed to create a Deuda.
     */
    data: XOR<DeudaCreateInput, DeudaUncheckedCreateInput>
  }

  /**
   * Deuda createMany
   */
  export type DeudaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Deudas.
     */
    data: DeudaCreateManyInput | DeudaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Deuda createManyAndReturn
   */
  export type DeudaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deuda
     */
    select?: DeudaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Deudas.
     */
    data: DeudaCreateManyInput | DeudaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Deuda update
   */
  export type DeudaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deuda
     */
    select?: DeudaSelect<ExtArgs> | null
    /**
     * The data needed to update a Deuda.
     */
    data: XOR<DeudaUpdateInput, DeudaUncheckedUpdateInput>
    /**
     * Choose, which Deuda to update.
     */
    where: DeudaWhereUniqueInput
  }

  /**
   * Deuda updateMany
   */
  export type DeudaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Deudas.
     */
    data: XOR<DeudaUpdateManyMutationInput, DeudaUncheckedUpdateManyInput>
    /**
     * Filter which Deudas to update
     */
    where?: DeudaWhereInput
  }

  /**
   * Deuda upsert
   */
  export type DeudaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deuda
     */
    select?: DeudaSelect<ExtArgs> | null
    /**
     * The filter to search for the Deuda to update in case it exists.
     */
    where: DeudaWhereUniqueInput
    /**
     * In case the Deuda found by the `where` argument doesn't exist, create a new Deuda with this data.
     */
    create: XOR<DeudaCreateInput, DeudaUncheckedCreateInput>
    /**
     * In case the Deuda was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeudaUpdateInput, DeudaUncheckedUpdateInput>
  }

  /**
   * Deuda delete
   */
  export type DeudaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deuda
     */
    select?: DeudaSelect<ExtArgs> | null
    /**
     * Filter which Deuda to delete.
     */
    where: DeudaWhereUniqueInput
  }

  /**
   * Deuda deleteMany
   */
  export type DeudaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Deudas to delete
     */
    where?: DeudaWhereInput
  }

  /**
   * Deuda without action
   */
  export type DeudaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deuda
     */
    select?: DeudaSelect<ExtArgs> | null
  }


  /**
   * Model TipoGastoItem
   */

  export type AggregateTipoGastoItem = {
    _count: TipoGastoItemCountAggregateOutputType | null
    _min: TipoGastoItemMinAggregateOutputType | null
    _max: TipoGastoItemMaxAggregateOutputType | null
  }

  export type TipoGastoItemMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    descripcion: string | null
  }

  export type TipoGastoItemMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    descripcion: string | null
  }

  export type TipoGastoItemCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    _all: number
  }


  export type TipoGastoItemMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
  }

  export type TipoGastoItemMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
  }

  export type TipoGastoItemCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    _all?: true
  }

  export type TipoGastoItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoGastoItem to aggregate.
     */
    where?: TipoGastoItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoGastoItems to fetch.
     */
    orderBy?: TipoGastoItemOrderByWithRelationInput | TipoGastoItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TipoGastoItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoGastoItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoGastoItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TipoGastoItems
    **/
    _count?: true | TipoGastoItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TipoGastoItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TipoGastoItemMaxAggregateInputType
  }

  export type GetTipoGastoItemAggregateType<T extends TipoGastoItemAggregateArgs> = {
        [P in keyof T & keyof AggregateTipoGastoItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipoGastoItem[P]>
      : GetScalarType<T[P], AggregateTipoGastoItem[P]>
  }




  export type TipoGastoItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipoGastoItemWhereInput
    orderBy?: TipoGastoItemOrderByWithAggregationInput | TipoGastoItemOrderByWithAggregationInput[]
    by: TipoGastoItemScalarFieldEnum[] | TipoGastoItemScalarFieldEnum
    having?: TipoGastoItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TipoGastoItemCountAggregateInputType | true
    _min?: TipoGastoItemMinAggregateInputType
    _max?: TipoGastoItemMaxAggregateInputType
  }

  export type TipoGastoItemGroupByOutputType = {
    id: string
    nombre: string
    descripcion: string | null
    _count: TipoGastoItemCountAggregateOutputType | null
    _min: TipoGastoItemMinAggregateOutputType | null
    _max: TipoGastoItemMaxAggregateOutputType | null
  }

  type GetTipoGastoItemGroupByPayload<T extends TipoGastoItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TipoGastoItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TipoGastoItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TipoGastoItemGroupByOutputType[P]>
            : GetScalarType<T[P], TipoGastoItemGroupByOutputType[P]>
        }
      >
    >


  export type TipoGastoItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
  }, ExtArgs["result"]["tipoGastoItem"]>

  export type TipoGastoItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
  }, ExtArgs["result"]["tipoGastoItem"]>

  export type TipoGastoItemSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
  }


  export type $TipoGastoItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TipoGastoItem"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      descripcion: string | null
    }, ExtArgs["result"]["tipoGastoItem"]>
    composites: {}
  }

  type TipoGastoItemGetPayload<S extends boolean | null | undefined | TipoGastoItemDefaultArgs> = $Result.GetResult<Prisma.$TipoGastoItemPayload, S>

  type TipoGastoItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TipoGastoItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TipoGastoItemCountAggregateInputType | true
    }

  export interface TipoGastoItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TipoGastoItem'], meta: { name: 'TipoGastoItem' } }
    /**
     * Find zero or one TipoGastoItem that matches the filter.
     * @param {TipoGastoItemFindUniqueArgs} args - Arguments to find a TipoGastoItem
     * @example
     * // Get one TipoGastoItem
     * const tipoGastoItem = await prisma.tipoGastoItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TipoGastoItemFindUniqueArgs>(args: SelectSubset<T, TipoGastoItemFindUniqueArgs<ExtArgs>>): Prisma__TipoGastoItemClient<$Result.GetResult<Prisma.$TipoGastoItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TipoGastoItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TipoGastoItemFindUniqueOrThrowArgs} args - Arguments to find a TipoGastoItem
     * @example
     * // Get one TipoGastoItem
     * const tipoGastoItem = await prisma.tipoGastoItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TipoGastoItemFindUniqueOrThrowArgs>(args: SelectSubset<T, TipoGastoItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TipoGastoItemClient<$Result.GetResult<Prisma.$TipoGastoItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TipoGastoItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoGastoItemFindFirstArgs} args - Arguments to find a TipoGastoItem
     * @example
     * // Get one TipoGastoItem
     * const tipoGastoItem = await prisma.tipoGastoItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TipoGastoItemFindFirstArgs>(args?: SelectSubset<T, TipoGastoItemFindFirstArgs<ExtArgs>>): Prisma__TipoGastoItemClient<$Result.GetResult<Prisma.$TipoGastoItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TipoGastoItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoGastoItemFindFirstOrThrowArgs} args - Arguments to find a TipoGastoItem
     * @example
     * // Get one TipoGastoItem
     * const tipoGastoItem = await prisma.tipoGastoItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TipoGastoItemFindFirstOrThrowArgs>(args?: SelectSubset<T, TipoGastoItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__TipoGastoItemClient<$Result.GetResult<Prisma.$TipoGastoItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TipoGastoItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoGastoItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TipoGastoItems
     * const tipoGastoItems = await prisma.tipoGastoItem.findMany()
     * 
     * // Get first 10 TipoGastoItems
     * const tipoGastoItems = await prisma.tipoGastoItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tipoGastoItemWithIdOnly = await prisma.tipoGastoItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TipoGastoItemFindManyArgs>(args?: SelectSubset<T, TipoGastoItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoGastoItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TipoGastoItem.
     * @param {TipoGastoItemCreateArgs} args - Arguments to create a TipoGastoItem.
     * @example
     * // Create one TipoGastoItem
     * const TipoGastoItem = await prisma.tipoGastoItem.create({
     *   data: {
     *     // ... data to create a TipoGastoItem
     *   }
     * })
     * 
     */
    create<T extends TipoGastoItemCreateArgs>(args: SelectSubset<T, TipoGastoItemCreateArgs<ExtArgs>>): Prisma__TipoGastoItemClient<$Result.GetResult<Prisma.$TipoGastoItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TipoGastoItems.
     * @param {TipoGastoItemCreateManyArgs} args - Arguments to create many TipoGastoItems.
     * @example
     * // Create many TipoGastoItems
     * const tipoGastoItem = await prisma.tipoGastoItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TipoGastoItemCreateManyArgs>(args?: SelectSubset<T, TipoGastoItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TipoGastoItems and returns the data saved in the database.
     * @param {TipoGastoItemCreateManyAndReturnArgs} args - Arguments to create many TipoGastoItems.
     * @example
     * // Create many TipoGastoItems
     * const tipoGastoItem = await prisma.tipoGastoItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TipoGastoItems and only return the `id`
     * const tipoGastoItemWithIdOnly = await prisma.tipoGastoItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TipoGastoItemCreateManyAndReturnArgs>(args?: SelectSubset<T, TipoGastoItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoGastoItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TipoGastoItem.
     * @param {TipoGastoItemDeleteArgs} args - Arguments to delete one TipoGastoItem.
     * @example
     * // Delete one TipoGastoItem
     * const TipoGastoItem = await prisma.tipoGastoItem.delete({
     *   where: {
     *     // ... filter to delete one TipoGastoItem
     *   }
     * })
     * 
     */
    delete<T extends TipoGastoItemDeleteArgs>(args: SelectSubset<T, TipoGastoItemDeleteArgs<ExtArgs>>): Prisma__TipoGastoItemClient<$Result.GetResult<Prisma.$TipoGastoItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TipoGastoItem.
     * @param {TipoGastoItemUpdateArgs} args - Arguments to update one TipoGastoItem.
     * @example
     * // Update one TipoGastoItem
     * const tipoGastoItem = await prisma.tipoGastoItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TipoGastoItemUpdateArgs>(args: SelectSubset<T, TipoGastoItemUpdateArgs<ExtArgs>>): Prisma__TipoGastoItemClient<$Result.GetResult<Prisma.$TipoGastoItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TipoGastoItems.
     * @param {TipoGastoItemDeleteManyArgs} args - Arguments to filter TipoGastoItems to delete.
     * @example
     * // Delete a few TipoGastoItems
     * const { count } = await prisma.tipoGastoItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TipoGastoItemDeleteManyArgs>(args?: SelectSubset<T, TipoGastoItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipoGastoItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoGastoItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TipoGastoItems
     * const tipoGastoItem = await prisma.tipoGastoItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TipoGastoItemUpdateManyArgs>(args: SelectSubset<T, TipoGastoItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TipoGastoItem.
     * @param {TipoGastoItemUpsertArgs} args - Arguments to update or create a TipoGastoItem.
     * @example
     * // Update or create a TipoGastoItem
     * const tipoGastoItem = await prisma.tipoGastoItem.upsert({
     *   create: {
     *     // ... data to create a TipoGastoItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TipoGastoItem we want to update
     *   }
     * })
     */
    upsert<T extends TipoGastoItemUpsertArgs>(args: SelectSubset<T, TipoGastoItemUpsertArgs<ExtArgs>>): Prisma__TipoGastoItemClient<$Result.GetResult<Prisma.$TipoGastoItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TipoGastoItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoGastoItemCountArgs} args - Arguments to filter TipoGastoItems to count.
     * @example
     * // Count the number of TipoGastoItems
     * const count = await prisma.tipoGastoItem.count({
     *   where: {
     *     // ... the filter for the TipoGastoItems we want to count
     *   }
     * })
    **/
    count<T extends TipoGastoItemCountArgs>(
      args?: Subset<T, TipoGastoItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TipoGastoItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TipoGastoItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoGastoItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TipoGastoItemAggregateArgs>(args: Subset<T, TipoGastoItemAggregateArgs>): Prisma.PrismaPromise<GetTipoGastoItemAggregateType<T>>

    /**
     * Group by TipoGastoItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoGastoItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TipoGastoItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TipoGastoItemGroupByArgs['orderBy'] }
        : { orderBy?: TipoGastoItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TipoGastoItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipoGastoItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TipoGastoItem model
   */
  readonly fields: TipoGastoItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TipoGastoItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TipoGastoItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TipoGastoItem model
   */ 
  interface TipoGastoItemFieldRefs {
    readonly id: FieldRef<"TipoGastoItem", 'String'>
    readonly nombre: FieldRef<"TipoGastoItem", 'String'>
    readonly descripcion: FieldRef<"TipoGastoItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TipoGastoItem findUnique
   */
  export type TipoGastoItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoGastoItem
     */
    select?: TipoGastoItemSelect<ExtArgs> | null
    /**
     * Filter, which TipoGastoItem to fetch.
     */
    where: TipoGastoItemWhereUniqueInput
  }

  /**
   * TipoGastoItem findUniqueOrThrow
   */
  export type TipoGastoItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoGastoItem
     */
    select?: TipoGastoItemSelect<ExtArgs> | null
    /**
     * Filter, which TipoGastoItem to fetch.
     */
    where: TipoGastoItemWhereUniqueInput
  }

  /**
   * TipoGastoItem findFirst
   */
  export type TipoGastoItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoGastoItem
     */
    select?: TipoGastoItemSelect<ExtArgs> | null
    /**
     * Filter, which TipoGastoItem to fetch.
     */
    where?: TipoGastoItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoGastoItems to fetch.
     */
    orderBy?: TipoGastoItemOrderByWithRelationInput | TipoGastoItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoGastoItems.
     */
    cursor?: TipoGastoItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoGastoItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoGastoItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoGastoItems.
     */
    distinct?: TipoGastoItemScalarFieldEnum | TipoGastoItemScalarFieldEnum[]
  }

  /**
   * TipoGastoItem findFirstOrThrow
   */
  export type TipoGastoItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoGastoItem
     */
    select?: TipoGastoItemSelect<ExtArgs> | null
    /**
     * Filter, which TipoGastoItem to fetch.
     */
    where?: TipoGastoItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoGastoItems to fetch.
     */
    orderBy?: TipoGastoItemOrderByWithRelationInput | TipoGastoItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoGastoItems.
     */
    cursor?: TipoGastoItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoGastoItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoGastoItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoGastoItems.
     */
    distinct?: TipoGastoItemScalarFieldEnum | TipoGastoItemScalarFieldEnum[]
  }

  /**
   * TipoGastoItem findMany
   */
  export type TipoGastoItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoGastoItem
     */
    select?: TipoGastoItemSelect<ExtArgs> | null
    /**
     * Filter, which TipoGastoItems to fetch.
     */
    where?: TipoGastoItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoGastoItems to fetch.
     */
    orderBy?: TipoGastoItemOrderByWithRelationInput | TipoGastoItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TipoGastoItems.
     */
    cursor?: TipoGastoItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoGastoItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoGastoItems.
     */
    skip?: number
    distinct?: TipoGastoItemScalarFieldEnum | TipoGastoItemScalarFieldEnum[]
  }

  /**
   * TipoGastoItem create
   */
  export type TipoGastoItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoGastoItem
     */
    select?: TipoGastoItemSelect<ExtArgs> | null
    /**
     * The data needed to create a TipoGastoItem.
     */
    data: XOR<TipoGastoItemCreateInput, TipoGastoItemUncheckedCreateInput>
  }

  /**
   * TipoGastoItem createMany
   */
  export type TipoGastoItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TipoGastoItems.
     */
    data: TipoGastoItemCreateManyInput | TipoGastoItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TipoGastoItem createManyAndReturn
   */
  export type TipoGastoItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoGastoItem
     */
    select?: TipoGastoItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TipoGastoItems.
     */
    data: TipoGastoItemCreateManyInput | TipoGastoItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TipoGastoItem update
   */
  export type TipoGastoItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoGastoItem
     */
    select?: TipoGastoItemSelect<ExtArgs> | null
    /**
     * The data needed to update a TipoGastoItem.
     */
    data: XOR<TipoGastoItemUpdateInput, TipoGastoItemUncheckedUpdateInput>
    /**
     * Choose, which TipoGastoItem to update.
     */
    where: TipoGastoItemWhereUniqueInput
  }

  /**
   * TipoGastoItem updateMany
   */
  export type TipoGastoItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TipoGastoItems.
     */
    data: XOR<TipoGastoItemUpdateManyMutationInput, TipoGastoItemUncheckedUpdateManyInput>
    /**
     * Filter which TipoGastoItems to update
     */
    where?: TipoGastoItemWhereInput
  }

  /**
   * TipoGastoItem upsert
   */
  export type TipoGastoItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoGastoItem
     */
    select?: TipoGastoItemSelect<ExtArgs> | null
    /**
     * The filter to search for the TipoGastoItem to update in case it exists.
     */
    where: TipoGastoItemWhereUniqueInput
    /**
     * In case the TipoGastoItem found by the `where` argument doesn't exist, create a new TipoGastoItem with this data.
     */
    create: XOR<TipoGastoItemCreateInput, TipoGastoItemUncheckedCreateInput>
    /**
     * In case the TipoGastoItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TipoGastoItemUpdateInput, TipoGastoItemUncheckedUpdateInput>
  }

  /**
   * TipoGastoItem delete
   */
  export type TipoGastoItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoGastoItem
     */
    select?: TipoGastoItemSelect<ExtArgs> | null
    /**
     * Filter which TipoGastoItem to delete.
     */
    where: TipoGastoItemWhereUniqueInput
  }

  /**
   * TipoGastoItem deleteMany
   */
  export type TipoGastoItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoGastoItems to delete
     */
    where?: TipoGastoItemWhereInput
  }

  /**
   * TipoGastoItem without action
   */
  export type TipoGastoItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoGastoItem
     */
    select?: TipoGastoItemSelect<ExtArgs> | null
  }


  /**
   * Model FormaPagoItem
   */

  export type AggregateFormaPagoItem = {
    _count: FormaPagoItemCountAggregateOutputType | null
    _min: FormaPagoItemMinAggregateOutputType | null
    _max: FormaPagoItemMaxAggregateOutputType | null
  }

  export type FormaPagoItemMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    descripcion: string | null
  }

  export type FormaPagoItemMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    descripcion: string | null
  }

  export type FormaPagoItemCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    _all: number
  }


  export type FormaPagoItemMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
  }

  export type FormaPagoItemMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
  }

  export type FormaPagoItemCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    _all?: true
  }

  export type FormaPagoItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormaPagoItem to aggregate.
     */
    where?: FormaPagoItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormaPagoItems to fetch.
     */
    orderBy?: FormaPagoItemOrderByWithRelationInput | FormaPagoItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FormaPagoItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormaPagoItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormaPagoItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FormaPagoItems
    **/
    _count?: true | FormaPagoItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormaPagoItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormaPagoItemMaxAggregateInputType
  }

  export type GetFormaPagoItemAggregateType<T extends FormaPagoItemAggregateArgs> = {
        [P in keyof T & keyof AggregateFormaPagoItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFormaPagoItem[P]>
      : GetScalarType<T[P], AggregateFormaPagoItem[P]>
  }




  export type FormaPagoItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormaPagoItemWhereInput
    orderBy?: FormaPagoItemOrderByWithAggregationInput | FormaPagoItemOrderByWithAggregationInput[]
    by: FormaPagoItemScalarFieldEnum[] | FormaPagoItemScalarFieldEnum
    having?: FormaPagoItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormaPagoItemCountAggregateInputType | true
    _min?: FormaPagoItemMinAggregateInputType
    _max?: FormaPagoItemMaxAggregateInputType
  }

  export type FormaPagoItemGroupByOutputType = {
    id: string
    nombre: string
    descripcion: string | null
    _count: FormaPagoItemCountAggregateOutputType | null
    _min: FormaPagoItemMinAggregateOutputType | null
    _max: FormaPagoItemMaxAggregateOutputType | null
  }

  type GetFormaPagoItemGroupByPayload<T extends FormaPagoItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormaPagoItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormaPagoItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormaPagoItemGroupByOutputType[P]>
            : GetScalarType<T[P], FormaPagoItemGroupByOutputType[P]>
        }
      >
    >


  export type FormaPagoItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
  }, ExtArgs["result"]["formaPagoItem"]>

  export type FormaPagoItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
  }, ExtArgs["result"]["formaPagoItem"]>

  export type FormaPagoItemSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
  }


  export type $FormaPagoItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FormaPagoItem"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      descripcion: string | null
    }, ExtArgs["result"]["formaPagoItem"]>
    composites: {}
  }

  type FormaPagoItemGetPayload<S extends boolean | null | undefined | FormaPagoItemDefaultArgs> = $Result.GetResult<Prisma.$FormaPagoItemPayload, S>

  type FormaPagoItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FormaPagoItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FormaPagoItemCountAggregateInputType | true
    }

  export interface FormaPagoItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormaPagoItem'], meta: { name: 'FormaPagoItem' } }
    /**
     * Find zero or one FormaPagoItem that matches the filter.
     * @param {FormaPagoItemFindUniqueArgs} args - Arguments to find a FormaPagoItem
     * @example
     * // Get one FormaPagoItem
     * const formaPagoItem = await prisma.formaPagoItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FormaPagoItemFindUniqueArgs>(args: SelectSubset<T, FormaPagoItemFindUniqueArgs<ExtArgs>>): Prisma__FormaPagoItemClient<$Result.GetResult<Prisma.$FormaPagoItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FormaPagoItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FormaPagoItemFindUniqueOrThrowArgs} args - Arguments to find a FormaPagoItem
     * @example
     * // Get one FormaPagoItem
     * const formaPagoItem = await prisma.formaPagoItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FormaPagoItemFindUniqueOrThrowArgs>(args: SelectSubset<T, FormaPagoItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FormaPagoItemClient<$Result.GetResult<Prisma.$FormaPagoItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FormaPagoItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormaPagoItemFindFirstArgs} args - Arguments to find a FormaPagoItem
     * @example
     * // Get one FormaPagoItem
     * const formaPagoItem = await prisma.formaPagoItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FormaPagoItemFindFirstArgs>(args?: SelectSubset<T, FormaPagoItemFindFirstArgs<ExtArgs>>): Prisma__FormaPagoItemClient<$Result.GetResult<Prisma.$FormaPagoItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FormaPagoItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormaPagoItemFindFirstOrThrowArgs} args - Arguments to find a FormaPagoItem
     * @example
     * // Get one FormaPagoItem
     * const formaPagoItem = await prisma.formaPagoItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FormaPagoItemFindFirstOrThrowArgs>(args?: SelectSubset<T, FormaPagoItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__FormaPagoItemClient<$Result.GetResult<Prisma.$FormaPagoItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FormaPagoItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormaPagoItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FormaPagoItems
     * const formaPagoItems = await prisma.formaPagoItem.findMany()
     * 
     * // Get first 10 FormaPagoItems
     * const formaPagoItems = await prisma.formaPagoItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formaPagoItemWithIdOnly = await prisma.formaPagoItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FormaPagoItemFindManyArgs>(args?: SelectSubset<T, FormaPagoItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormaPagoItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FormaPagoItem.
     * @param {FormaPagoItemCreateArgs} args - Arguments to create a FormaPagoItem.
     * @example
     * // Create one FormaPagoItem
     * const FormaPagoItem = await prisma.formaPagoItem.create({
     *   data: {
     *     // ... data to create a FormaPagoItem
     *   }
     * })
     * 
     */
    create<T extends FormaPagoItemCreateArgs>(args: SelectSubset<T, FormaPagoItemCreateArgs<ExtArgs>>): Prisma__FormaPagoItemClient<$Result.GetResult<Prisma.$FormaPagoItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FormaPagoItems.
     * @param {FormaPagoItemCreateManyArgs} args - Arguments to create many FormaPagoItems.
     * @example
     * // Create many FormaPagoItems
     * const formaPagoItem = await prisma.formaPagoItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FormaPagoItemCreateManyArgs>(args?: SelectSubset<T, FormaPagoItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FormaPagoItems and returns the data saved in the database.
     * @param {FormaPagoItemCreateManyAndReturnArgs} args - Arguments to create many FormaPagoItems.
     * @example
     * // Create many FormaPagoItems
     * const formaPagoItem = await prisma.formaPagoItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FormaPagoItems and only return the `id`
     * const formaPagoItemWithIdOnly = await prisma.formaPagoItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FormaPagoItemCreateManyAndReturnArgs>(args?: SelectSubset<T, FormaPagoItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormaPagoItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FormaPagoItem.
     * @param {FormaPagoItemDeleteArgs} args - Arguments to delete one FormaPagoItem.
     * @example
     * // Delete one FormaPagoItem
     * const FormaPagoItem = await prisma.formaPagoItem.delete({
     *   where: {
     *     // ... filter to delete one FormaPagoItem
     *   }
     * })
     * 
     */
    delete<T extends FormaPagoItemDeleteArgs>(args: SelectSubset<T, FormaPagoItemDeleteArgs<ExtArgs>>): Prisma__FormaPagoItemClient<$Result.GetResult<Prisma.$FormaPagoItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FormaPagoItem.
     * @param {FormaPagoItemUpdateArgs} args - Arguments to update one FormaPagoItem.
     * @example
     * // Update one FormaPagoItem
     * const formaPagoItem = await prisma.formaPagoItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FormaPagoItemUpdateArgs>(args: SelectSubset<T, FormaPagoItemUpdateArgs<ExtArgs>>): Prisma__FormaPagoItemClient<$Result.GetResult<Prisma.$FormaPagoItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FormaPagoItems.
     * @param {FormaPagoItemDeleteManyArgs} args - Arguments to filter FormaPagoItems to delete.
     * @example
     * // Delete a few FormaPagoItems
     * const { count } = await prisma.formaPagoItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FormaPagoItemDeleteManyArgs>(args?: SelectSubset<T, FormaPagoItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FormaPagoItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormaPagoItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FormaPagoItems
     * const formaPagoItem = await prisma.formaPagoItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FormaPagoItemUpdateManyArgs>(args: SelectSubset<T, FormaPagoItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FormaPagoItem.
     * @param {FormaPagoItemUpsertArgs} args - Arguments to update or create a FormaPagoItem.
     * @example
     * // Update or create a FormaPagoItem
     * const formaPagoItem = await prisma.formaPagoItem.upsert({
     *   create: {
     *     // ... data to create a FormaPagoItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FormaPagoItem we want to update
     *   }
     * })
     */
    upsert<T extends FormaPagoItemUpsertArgs>(args: SelectSubset<T, FormaPagoItemUpsertArgs<ExtArgs>>): Prisma__FormaPagoItemClient<$Result.GetResult<Prisma.$FormaPagoItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FormaPagoItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormaPagoItemCountArgs} args - Arguments to filter FormaPagoItems to count.
     * @example
     * // Count the number of FormaPagoItems
     * const count = await prisma.formaPagoItem.count({
     *   where: {
     *     // ... the filter for the FormaPagoItems we want to count
     *   }
     * })
    **/
    count<T extends FormaPagoItemCountArgs>(
      args?: Subset<T, FormaPagoItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormaPagoItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FormaPagoItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormaPagoItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormaPagoItemAggregateArgs>(args: Subset<T, FormaPagoItemAggregateArgs>): Prisma.PrismaPromise<GetFormaPagoItemAggregateType<T>>

    /**
     * Group by FormaPagoItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormaPagoItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormaPagoItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormaPagoItemGroupByArgs['orderBy'] }
        : { orderBy?: FormaPagoItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormaPagoItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormaPagoItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FormaPagoItem model
   */
  readonly fields: FormaPagoItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FormaPagoItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FormaPagoItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FormaPagoItem model
   */ 
  interface FormaPagoItemFieldRefs {
    readonly id: FieldRef<"FormaPagoItem", 'String'>
    readonly nombre: FieldRef<"FormaPagoItem", 'String'>
    readonly descripcion: FieldRef<"FormaPagoItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FormaPagoItem findUnique
   */
  export type FormaPagoItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormaPagoItem
     */
    select?: FormaPagoItemSelect<ExtArgs> | null
    /**
     * Filter, which FormaPagoItem to fetch.
     */
    where: FormaPagoItemWhereUniqueInput
  }

  /**
   * FormaPagoItem findUniqueOrThrow
   */
  export type FormaPagoItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormaPagoItem
     */
    select?: FormaPagoItemSelect<ExtArgs> | null
    /**
     * Filter, which FormaPagoItem to fetch.
     */
    where: FormaPagoItemWhereUniqueInput
  }

  /**
   * FormaPagoItem findFirst
   */
  export type FormaPagoItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormaPagoItem
     */
    select?: FormaPagoItemSelect<ExtArgs> | null
    /**
     * Filter, which FormaPagoItem to fetch.
     */
    where?: FormaPagoItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormaPagoItems to fetch.
     */
    orderBy?: FormaPagoItemOrderByWithRelationInput | FormaPagoItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormaPagoItems.
     */
    cursor?: FormaPagoItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormaPagoItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormaPagoItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormaPagoItems.
     */
    distinct?: FormaPagoItemScalarFieldEnum | FormaPagoItemScalarFieldEnum[]
  }

  /**
   * FormaPagoItem findFirstOrThrow
   */
  export type FormaPagoItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormaPagoItem
     */
    select?: FormaPagoItemSelect<ExtArgs> | null
    /**
     * Filter, which FormaPagoItem to fetch.
     */
    where?: FormaPagoItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormaPagoItems to fetch.
     */
    orderBy?: FormaPagoItemOrderByWithRelationInput | FormaPagoItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormaPagoItems.
     */
    cursor?: FormaPagoItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormaPagoItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormaPagoItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormaPagoItems.
     */
    distinct?: FormaPagoItemScalarFieldEnum | FormaPagoItemScalarFieldEnum[]
  }

  /**
   * FormaPagoItem findMany
   */
  export type FormaPagoItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormaPagoItem
     */
    select?: FormaPagoItemSelect<ExtArgs> | null
    /**
     * Filter, which FormaPagoItems to fetch.
     */
    where?: FormaPagoItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormaPagoItems to fetch.
     */
    orderBy?: FormaPagoItemOrderByWithRelationInput | FormaPagoItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FormaPagoItems.
     */
    cursor?: FormaPagoItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormaPagoItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormaPagoItems.
     */
    skip?: number
    distinct?: FormaPagoItemScalarFieldEnum | FormaPagoItemScalarFieldEnum[]
  }

  /**
   * FormaPagoItem create
   */
  export type FormaPagoItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormaPagoItem
     */
    select?: FormaPagoItemSelect<ExtArgs> | null
    /**
     * The data needed to create a FormaPagoItem.
     */
    data: XOR<FormaPagoItemCreateInput, FormaPagoItemUncheckedCreateInput>
  }

  /**
   * FormaPagoItem createMany
   */
  export type FormaPagoItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FormaPagoItems.
     */
    data: FormaPagoItemCreateManyInput | FormaPagoItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FormaPagoItem createManyAndReturn
   */
  export type FormaPagoItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormaPagoItem
     */
    select?: FormaPagoItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FormaPagoItems.
     */
    data: FormaPagoItemCreateManyInput | FormaPagoItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FormaPagoItem update
   */
  export type FormaPagoItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormaPagoItem
     */
    select?: FormaPagoItemSelect<ExtArgs> | null
    /**
     * The data needed to update a FormaPagoItem.
     */
    data: XOR<FormaPagoItemUpdateInput, FormaPagoItemUncheckedUpdateInput>
    /**
     * Choose, which FormaPagoItem to update.
     */
    where: FormaPagoItemWhereUniqueInput
  }

  /**
   * FormaPagoItem updateMany
   */
  export type FormaPagoItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FormaPagoItems.
     */
    data: XOR<FormaPagoItemUpdateManyMutationInput, FormaPagoItemUncheckedUpdateManyInput>
    /**
     * Filter which FormaPagoItems to update
     */
    where?: FormaPagoItemWhereInput
  }

  /**
   * FormaPagoItem upsert
   */
  export type FormaPagoItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormaPagoItem
     */
    select?: FormaPagoItemSelect<ExtArgs> | null
    /**
     * The filter to search for the FormaPagoItem to update in case it exists.
     */
    where: FormaPagoItemWhereUniqueInput
    /**
     * In case the FormaPagoItem found by the `where` argument doesn't exist, create a new FormaPagoItem with this data.
     */
    create: XOR<FormaPagoItemCreateInput, FormaPagoItemUncheckedCreateInput>
    /**
     * In case the FormaPagoItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FormaPagoItemUpdateInput, FormaPagoItemUncheckedUpdateInput>
  }

  /**
   * FormaPagoItem delete
   */
  export type FormaPagoItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormaPagoItem
     */
    select?: FormaPagoItemSelect<ExtArgs> | null
    /**
     * Filter which FormaPagoItem to delete.
     */
    where: FormaPagoItemWhereUniqueInput
  }

  /**
   * FormaPagoItem deleteMany
   */
  export type FormaPagoItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormaPagoItems to delete
     */
    where?: FormaPagoItemWhereInput
  }

  /**
   * FormaPagoItem without action
   */
  export type FormaPagoItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormaPagoItem
     */
    select?: FormaPagoItemSelect<ExtArgs> | null
  }


  /**
   * Model CategoriaItem
   */

  export type AggregateCategoriaItem = {
    _count: CategoriaItemCountAggregateOutputType | null
    _min: CategoriaItemMinAggregateOutputType | null
    _max: CategoriaItemMaxAggregateOutputType | null
  }

  export type CategoriaItemMinAggregateOutputType = {
    id: string | null
    codigo: string | null
    descripcion: string | null
  }

  export type CategoriaItemMaxAggregateOutputType = {
    id: string | null
    codigo: string | null
    descripcion: string | null
  }

  export type CategoriaItemCountAggregateOutputType = {
    id: number
    codigo: number
    descripcion: number
    _all: number
  }


  export type CategoriaItemMinAggregateInputType = {
    id?: true
    codigo?: true
    descripcion?: true
  }

  export type CategoriaItemMaxAggregateInputType = {
    id?: true
    codigo?: true
    descripcion?: true
  }

  export type CategoriaItemCountAggregateInputType = {
    id?: true
    codigo?: true
    descripcion?: true
    _all?: true
  }

  export type CategoriaItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoriaItem to aggregate.
     */
    where?: CategoriaItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaItems to fetch.
     */
    orderBy?: CategoriaItemOrderByWithRelationInput | CategoriaItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoriaItems
    **/
    _count?: true | CategoriaItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaItemMaxAggregateInputType
  }

  export type GetCategoriaItemAggregateType<T extends CategoriaItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoriaItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoriaItem[P]>
      : GetScalarType<T[P], AggregateCategoriaItem[P]>
  }




  export type CategoriaItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaItemWhereInput
    orderBy?: CategoriaItemOrderByWithAggregationInput | CategoriaItemOrderByWithAggregationInput[]
    by: CategoriaItemScalarFieldEnum[] | CategoriaItemScalarFieldEnum
    having?: CategoriaItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaItemCountAggregateInputType | true
    _min?: CategoriaItemMinAggregateInputType
    _max?: CategoriaItemMaxAggregateInputType
  }

  export type CategoriaItemGroupByOutputType = {
    id: string
    codigo: string
    descripcion: string
    _count: CategoriaItemCountAggregateOutputType | null
    _min: CategoriaItemMinAggregateOutputType | null
    _max: CategoriaItemMaxAggregateOutputType | null
  }

  type GetCategoriaItemGroupByPayload<T extends CategoriaItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaItemGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaItemGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    codigo?: boolean
    descripcion?: boolean
  }, ExtArgs["result"]["categoriaItem"]>

  export type CategoriaItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    codigo?: boolean
    descripcion?: boolean
  }, ExtArgs["result"]["categoriaItem"]>

  export type CategoriaItemSelectScalar = {
    id?: boolean
    codigo?: boolean
    descripcion?: boolean
  }


  export type $CategoriaItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CategoriaItem"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      codigo: string
      descripcion: string
    }, ExtArgs["result"]["categoriaItem"]>
    composites: {}
  }

  type CategoriaItemGetPayload<S extends boolean | null | undefined | CategoriaItemDefaultArgs> = $Result.GetResult<Prisma.$CategoriaItemPayload, S>

  type CategoriaItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriaItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriaItemCountAggregateInputType | true
    }

  export interface CategoriaItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CategoriaItem'], meta: { name: 'CategoriaItem' } }
    /**
     * Find zero or one CategoriaItem that matches the filter.
     * @param {CategoriaItemFindUniqueArgs} args - Arguments to find a CategoriaItem
     * @example
     * // Get one CategoriaItem
     * const categoriaItem = await prisma.categoriaItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoriaItemFindUniqueArgs>(args: SelectSubset<T, CategoriaItemFindUniqueArgs<ExtArgs>>): Prisma__CategoriaItemClient<$Result.GetResult<Prisma.$CategoriaItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CategoriaItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoriaItemFindUniqueOrThrowArgs} args - Arguments to find a CategoriaItem
     * @example
     * // Get one CategoriaItem
     * const categoriaItem = await prisma.categoriaItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoriaItemFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoriaItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoriaItemClient<$Result.GetResult<Prisma.$CategoriaItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CategoriaItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaItemFindFirstArgs} args - Arguments to find a CategoriaItem
     * @example
     * // Get one CategoriaItem
     * const categoriaItem = await prisma.categoriaItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoriaItemFindFirstArgs>(args?: SelectSubset<T, CategoriaItemFindFirstArgs<ExtArgs>>): Prisma__CategoriaItemClient<$Result.GetResult<Prisma.$CategoriaItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CategoriaItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaItemFindFirstOrThrowArgs} args - Arguments to find a CategoriaItem
     * @example
     * // Get one CategoriaItem
     * const categoriaItem = await prisma.categoriaItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoriaItemFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoriaItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoriaItemClient<$Result.GetResult<Prisma.$CategoriaItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CategoriaItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoriaItems
     * const categoriaItems = await prisma.categoriaItem.findMany()
     * 
     * // Get first 10 CategoriaItems
     * const categoriaItems = await prisma.categoriaItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaItemWithIdOnly = await prisma.categoriaItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoriaItemFindManyArgs>(args?: SelectSubset<T, CategoriaItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CategoriaItem.
     * @param {CategoriaItemCreateArgs} args - Arguments to create a CategoriaItem.
     * @example
     * // Create one CategoriaItem
     * const CategoriaItem = await prisma.categoriaItem.create({
     *   data: {
     *     // ... data to create a CategoriaItem
     *   }
     * })
     * 
     */
    create<T extends CategoriaItemCreateArgs>(args: SelectSubset<T, CategoriaItemCreateArgs<ExtArgs>>): Prisma__CategoriaItemClient<$Result.GetResult<Prisma.$CategoriaItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CategoriaItems.
     * @param {CategoriaItemCreateManyArgs} args - Arguments to create many CategoriaItems.
     * @example
     * // Create many CategoriaItems
     * const categoriaItem = await prisma.categoriaItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoriaItemCreateManyArgs>(args?: SelectSubset<T, CategoriaItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CategoriaItems and returns the data saved in the database.
     * @param {CategoriaItemCreateManyAndReturnArgs} args - Arguments to create many CategoriaItems.
     * @example
     * // Create many CategoriaItems
     * const categoriaItem = await prisma.categoriaItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CategoriaItems and only return the `id`
     * const categoriaItemWithIdOnly = await prisma.categoriaItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoriaItemCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoriaItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CategoriaItem.
     * @param {CategoriaItemDeleteArgs} args - Arguments to delete one CategoriaItem.
     * @example
     * // Delete one CategoriaItem
     * const CategoriaItem = await prisma.categoriaItem.delete({
     *   where: {
     *     // ... filter to delete one CategoriaItem
     *   }
     * })
     * 
     */
    delete<T extends CategoriaItemDeleteArgs>(args: SelectSubset<T, CategoriaItemDeleteArgs<ExtArgs>>): Prisma__CategoriaItemClient<$Result.GetResult<Prisma.$CategoriaItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CategoriaItem.
     * @param {CategoriaItemUpdateArgs} args - Arguments to update one CategoriaItem.
     * @example
     * // Update one CategoriaItem
     * const categoriaItem = await prisma.categoriaItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoriaItemUpdateArgs>(args: SelectSubset<T, CategoriaItemUpdateArgs<ExtArgs>>): Prisma__CategoriaItemClient<$Result.GetResult<Prisma.$CategoriaItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CategoriaItems.
     * @param {CategoriaItemDeleteManyArgs} args - Arguments to filter CategoriaItems to delete.
     * @example
     * // Delete a few CategoriaItems
     * const { count } = await prisma.categoriaItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoriaItemDeleteManyArgs>(args?: SelectSubset<T, CategoriaItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoriaItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoriaItems
     * const categoriaItem = await prisma.categoriaItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoriaItemUpdateManyArgs>(args: SelectSubset<T, CategoriaItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CategoriaItem.
     * @param {CategoriaItemUpsertArgs} args - Arguments to update or create a CategoriaItem.
     * @example
     * // Update or create a CategoriaItem
     * const categoriaItem = await prisma.categoriaItem.upsert({
     *   create: {
     *     // ... data to create a CategoriaItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoriaItem we want to update
     *   }
     * })
     */
    upsert<T extends CategoriaItemUpsertArgs>(args: SelectSubset<T, CategoriaItemUpsertArgs<ExtArgs>>): Prisma__CategoriaItemClient<$Result.GetResult<Prisma.$CategoriaItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CategoriaItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaItemCountArgs} args - Arguments to filter CategoriaItems to count.
     * @example
     * // Count the number of CategoriaItems
     * const count = await prisma.categoriaItem.count({
     *   where: {
     *     // ... the filter for the CategoriaItems we want to count
     *   }
     * })
    **/
    count<T extends CategoriaItemCountArgs>(
      args?: Subset<T, CategoriaItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoriaItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaItemAggregateArgs>(args: Subset<T, CategoriaItemAggregateArgs>): Prisma.PrismaPromise<GetCategoriaItemAggregateType<T>>

    /**
     * Group by CategoriaItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaItemGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CategoriaItem model
   */
  readonly fields: CategoriaItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoriaItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriaItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CategoriaItem model
   */ 
  interface CategoriaItemFieldRefs {
    readonly id: FieldRef<"CategoriaItem", 'String'>
    readonly codigo: FieldRef<"CategoriaItem", 'String'>
    readonly descripcion: FieldRef<"CategoriaItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CategoriaItem findUnique
   */
  export type CategoriaItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaItem
     */
    select?: CategoriaItemSelect<ExtArgs> | null
    /**
     * Filter, which CategoriaItem to fetch.
     */
    where: CategoriaItemWhereUniqueInput
  }

  /**
   * CategoriaItem findUniqueOrThrow
   */
  export type CategoriaItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaItem
     */
    select?: CategoriaItemSelect<ExtArgs> | null
    /**
     * Filter, which CategoriaItem to fetch.
     */
    where: CategoriaItemWhereUniqueInput
  }

  /**
   * CategoriaItem findFirst
   */
  export type CategoriaItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaItem
     */
    select?: CategoriaItemSelect<ExtArgs> | null
    /**
     * Filter, which CategoriaItem to fetch.
     */
    where?: CategoriaItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaItems to fetch.
     */
    orderBy?: CategoriaItemOrderByWithRelationInput | CategoriaItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriaItems.
     */
    cursor?: CategoriaItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriaItems.
     */
    distinct?: CategoriaItemScalarFieldEnum | CategoriaItemScalarFieldEnum[]
  }

  /**
   * CategoriaItem findFirstOrThrow
   */
  export type CategoriaItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaItem
     */
    select?: CategoriaItemSelect<ExtArgs> | null
    /**
     * Filter, which CategoriaItem to fetch.
     */
    where?: CategoriaItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaItems to fetch.
     */
    orderBy?: CategoriaItemOrderByWithRelationInput | CategoriaItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriaItems.
     */
    cursor?: CategoriaItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriaItems.
     */
    distinct?: CategoriaItemScalarFieldEnum | CategoriaItemScalarFieldEnum[]
  }

  /**
   * CategoriaItem findMany
   */
  export type CategoriaItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaItem
     */
    select?: CategoriaItemSelect<ExtArgs> | null
    /**
     * Filter, which CategoriaItems to fetch.
     */
    where?: CategoriaItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaItems to fetch.
     */
    orderBy?: CategoriaItemOrderByWithRelationInput | CategoriaItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoriaItems.
     */
    cursor?: CategoriaItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaItems.
     */
    skip?: number
    distinct?: CategoriaItemScalarFieldEnum | CategoriaItemScalarFieldEnum[]
  }

  /**
   * CategoriaItem create
   */
  export type CategoriaItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaItem
     */
    select?: CategoriaItemSelect<ExtArgs> | null
    /**
     * The data needed to create a CategoriaItem.
     */
    data: XOR<CategoriaItemCreateInput, CategoriaItemUncheckedCreateInput>
  }

  /**
   * CategoriaItem createMany
   */
  export type CategoriaItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CategoriaItems.
     */
    data: CategoriaItemCreateManyInput | CategoriaItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CategoriaItem createManyAndReturn
   */
  export type CategoriaItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaItem
     */
    select?: CategoriaItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CategoriaItems.
     */
    data: CategoriaItemCreateManyInput | CategoriaItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CategoriaItem update
   */
  export type CategoriaItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaItem
     */
    select?: CategoriaItemSelect<ExtArgs> | null
    /**
     * The data needed to update a CategoriaItem.
     */
    data: XOR<CategoriaItemUpdateInput, CategoriaItemUncheckedUpdateInput>
    /**
     * Choose, which CategoriaItem to update.
     */
    where: CategoriaItemWhereUniqueInput
  }

  /**
   * CategoriaItem updateMany
   */
  export type CategoriaItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CategoriaItems.
     */
    data: XOR<CategoriaItemUpdateManyMutationInput, CategoriaItemUncheckedUpdateManyInput>
    /**
     * Filter which CategoriaItems to update
     */
    where?: CategoriaItemWhereInput
  }

  /**
   * CategoriaItem upsert
   */
  export type CategoriaItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaItem
     */
    select?: CategoriaItemSelect<ExtArgs> | null
    /**
     * The filter to search for the CategoriaItem to update in case it exists.
     */
    where: CategoriaItemWhereUniqueInput
    /**
     * In case the CategoriaItem found by the `where` argument doesn't exist, create a new CategoriaItem with this data.
     */
    create: XOR<CategoriaItemCreateInput, CategoriaItemUncheckedCreateInput>
    /**
     * In case the CategoriaItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaItemUpdateInput, CategoriaItemUncheckedUpdateInput>
  }

  /**
   * CategoriaItem delete
   */
  export type CategoriaItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaItem
     */
    select?: CategoriaItemSelect<ExtArgs> | null
    /**
     * Filter which CategoriaItem to delete.
     */
    where: CategoriaItemWhereUniqueInput
  }

  /**
   * CategoriaItem deleteMany
   */
  export type CategoriaItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoriaItems to delete
     */
    where?: CategoriaItemWhereInput
  }

  /**
   * CategoriaItem without action
   */
  export type CategoriaItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaItem
     */
    select?: CategoriaItemSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GastoScalarFieldEnum: {
    id: 'id',
    concepto: 'concepto',
    monto: 'monto',
    tipo_gasto: 'tipo_gasto',
    forma_pago: 'forma_pago',
    mes: 'mes',
    anio: 'anio',
    fecha_cargo: 'fecha_cargo',
    fecha_pago: 'fecha_pago',
    categoria: 'categoria',
    a_pagos: 'a_pagos',
    no_mens: 'no_mens',
    total_meses: 'total_meses',
    tag: 'tag',
    se_divide: 'se_divide',
    gasto_x_mes: 'gasto_x_mes',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type GastoScalarFieldEnum = (typeof GastoScalarFieldEnum)[keyof typeof GastoScalarFieldEnum]


  export const BalanceScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    concepto: 'concepto',
    monto: 'monto',
    deben_ser: 'deben_ser',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type BalanceScalarFieldEnum = (typeof BalanceScalarFieldEnum)[keyof typeof BalanceScalarFieldEnum]


  export const DeudaScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    item: 'item',
    monto: 'monto',
    fecha: 'fecha',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type DeudaScalarFieldEnum = (typeof DeudaScalarFieldEnum)[keyof typeof DeudaScalarFieldEnum]


  export const TipoGastoItemScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion'
  };

  export type TipoGastoItemScalarFieldEnum = (typeof TipoGastoItemScalarFieldEnum)[keyof typeof TipoGastoItemScalarFieldEnum]


  export const FormaPagoItemScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion'
  };

  export type FormaPagoItemScalarFieldEnum = (typeof FormaPagoItemScalarFieldEnum)[keyof typeof FormaPagoItemScalarFieldEnum]


  export const CategoriaItemScalarFieldEnum: {
    id: 'id',
    codigo: 'codigo',
    descripcion: 'descripcion'
  };

  export type CategoriaItemScalarFieldEnum = (typeof CategoriaItemScalarFieldEnum)[keyof typeof CategoriaItemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type GastoWhereInput = {
    AND?: GastoWhereInput | GastoWhereInput[]
    OR?: GastoWhereInput[]
    NOT?: GastoWhereInput | GastoWhereInput[]
    id?: IntFilter<"Gasto"> | number
    concepto?: StringFilter<"Gasto"> | string
    monto?: DecimalFilter<"Gasto"> | Decimal | DecimalJsLike | number | string
    tipo_gasto?: StringFilter<"Gasto"> | string
    forma_pago?: StringFilter<"Gasto"> | string
    mes?: StringFilter<"Gasto"> | string
    anio?: IntFilter<"Gasto"> | number
    fecha_cargo?: DateTimeFilter<"Gasto"> | Date | string
    fecha_pago?: DateTimeFilter<"Gasto"> | Date | string
    categoria?: StringFilter<"Gasto"> | string
    a_pagos?: BoolFilter<"Gasto"> | boolean
    no_mens?: IntFilter<"Gasto"> | number
    total_meses?: IntFilter<"Gasto"> | number
    tag?: StringFilter<"Gasto"> | string
    se_divide?: BoolFilter<"Gasto"> | boolean
    gasto_x_mes?: StringFilter<"Gasto"> | string
    created_at?: DateTimeFilter<"Gasto"> | Date | string
    updated_at?: DateTimeFilter<"Gasto"> | Date | string
  }

  export type GastoOrderByWithRelationInput = {
    id?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    tipo_gasto?: SortOrder
    forma_pago?: SortOrder
    mes?: SortOrder
    anio?: SortOrder
    fecha_cargo?: SortOrder
    fecha_pago?: SortOrder
    categoria?: SortOrder
    a_pagos?: SortOrder
    no_mens?: SortOrder
    total_meses?: SortOrder
    tag?: SortOrder
    se_divide?: SortOrder
    gasto_x_mes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type GastoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GastoWhereInput | GastoWhereInput[]
    OR?: GastoWhereInput[]
    NOT?: GastoWhereInput | GastoWhereInput[]
    concepto?: StringFilter<"Gasto"> | string
    monto?: DecimalFilter<"Gasto"> | Decimal | DecimalJsLike | number | string
    tipo_gasto?: StringFilter<"Gasto"> | string
    forma_pago?: StringFilter<"Gasto"> | string
    mes?: StringFilter<"Gasto"> | string
    anio?: IntFilter<"Gasto"> | number
    fecha_cargo?: DateTimeFilter<"Gasto"> | Date | string
    fecha_pago?: DateTimeFilter<"Gasto"> | Date | string
    categoria?: StringFilter<"Gasto"> | string
    a_pagos?: BoolFilter<"Gasto"> | boolean
    no_mens?: IntFilter<"Gasto"> | number
    total_meses?: IntFilter<"Gasto"> | number
    tag?: StringFilter<"Gasto"> | string
    se_divide?: BoolFilter<"Gasto"> | boolean
    gasto_x_mes?: StringFilter<"Gasto"> | string
    created_at?: DateTimeFilter<"Gasto"> | Date | string
    updated_at?: DateTimeFilter<"Gasto"> | Date | string
  }, "id">

  export type GastoOrderByWithAggregationInput = {
    id?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    tipo_gasto?: SortOrder
    forma_pago?: SortOrder
    mes?: SortOrder
    anio?: SortOrder
    fecha_cargo?: SortOrder
    fecha_pago?: SortOrder
    categoria?: SortOrder
    a_pagos?: SortOrder
    no_mens?: SortOrder
    total_meses?: SortOrder
    tag?: SortOrder
    se_divide?: SortOrder
    gasto_x_mes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: GastoCountOrderByAggregateInput
    _avg?: GastoAvgOrderByAggregateInput
    _max?: GastoMaxOrderByAggregateInput
    _min?: GastoMinOrderByAggregateInput
    _sum?: GastoSumOrderByAggregateInput
  }

  export type GastoScalarWhereWithAggregatesInput = {
    AND?: GastoScalarWhereWithAggregatesInput | GastoScalarWhereWithAggregatesInput[]
    OR?: GastoScalarWhereWithAggregatesInput[]
    NOT?: GastoScalarWhereWithAggregatesInput | GastoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Gasto"> | number
    concepto?: StringWithAggregatesFilter<"Gasto"> | string
    monto?: DecimalWithAggregatesFilter<"Gasto"> | Decimal | DecimalJsLike | number | string
    tipo_gasto?: StringWithAggregatesFilter<"Gasto"> | string
    forma_pago?: StringWithAggregatesFilter<"Gasto"> | string
    mes?: StringWithAggregatesFilter<"Gasto"> | string
    anio?: IntWithAggregatesFilter<"Gasto"> | number
    fecha_cargo?: DateTimeWithAggregatesFilter<"Gasto"> | Date | string
    fecha_pago?: DateTimeWithAggregatesFilter<"Gasto"> | Date | string
    categoria?: StringWithAggregatesFilter<"Gasto"> | string
    a_pagos?: BoolWithAggregatesFilter<"Gasto"> | boolean
    no_mens?: IntWithAggregatesFilter<"Gasto"> | number
    total_meses?: IntWithAggregatesFilter<"Gasto"> | number
    tag?: StringWithAggregatesFilter<"Gasto"> | string
    se_divide?: BoolWithAggregatesFilter<"Gasto"> | boolean
    gasto_x_mes?: StringWithAggregatesFilter<"Gasto"> | string
    created_at?: DateTimeWithAggregatesFilter<"Gasto"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Gasto"> | Date | string
  }

  export type BalanceWhereInput = {
    AND?: BalanceWhereInput | BalanceWhereInput[]
    OR?: BalanceWhereInput[]
    NOT?: BalanceWhereInput | BalanceWhereInput[]
    id?: IntFilter<"Balance"> | number
    tipo?: StringFilter<"Balance"> | string
    concepto?: StringFilter<"Balance"> | string
    monto?: DecimalFilter<"Balance"> | Decimal | DecimalJsLike | number | string
    deben_ser?: DecimalFilter<"Balance"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"Balance"> | Date | string
    updated_at?: DateTimeFilter<"Balance"> | Date | string
  }

  export type BalanceOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    deben_ser?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type BalanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BalanceWhereInput | BalanceWhereInput[]
    OR?: BalanceWhereInput[]
    NOT?: BalanceWhereInput | BalanceWhereInput[]
    tipo?: StringFilter<"Balance"> | string
    concepto?: StringFilter<"Balance"> | string
    monto?: DecimalFilter<"Balance"> | Decimal | DecimalJsLike | number | string
    deben_ser?: DecimalFilter<"Balance"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"Balance"> | Date | string
    updated_at?: DateTimeFilter<"Balance"> | Date | string
  }, "id">

  export type BalanceOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    deben_ser?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: BalanceCountOrderByAggregateInput
    _avg?: BalanceAvgOrderByAggregateInput
    _max?: BalanceMaxOrderByAggregateInput
    _min?: BalanceMinOrderByAggregateInput
    _sum?: BalanceSumOrderByAggregateInput
  }

  export type BalanceScalarWhereWithAggregatesInput = {
    AND?: BalanceScalarWhereWithAggregatesInput | BalanceScalarWhereWithAggregatesInput[]
    OR?: BalanceScalarWhereWithAggregatesInput[]
    NOT?: BalanceScalarWhereWithAggregatesInput | BalanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Balance"> | number
    tipo?: StringWithAggregatesFilter<"Balance"> | string
    concepto?: StringWithAggregatesFilter<"Balance"> | string
    monto?: DecimalWithAggregatesFilter<"Balance"> | Decimal | DecimalJsLike | number | string
    deben_ser?: DecimalWithAggregatesFilter<"Balance"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeWithAggregatesFilter<"Balance"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Balance"> | Date | string
  }

  export type DeudaWhereInput = {
    AND?: DeudaWhereInput | DeudaWhereInput[]
    OR?: DeudaWhereInput[]
    NOT?: DeudaWhereInput | DeudaWhereInput[]
    id?: IntFilter<"Deuda"> | number
    tipo?: StringFilter<"Deuda"> | string
    item?: StringFilter<"Deuda"> | string
    monto?: DecimalFilter<"Deuda"> | Decimal | DecimalJsLike | number | string
    fecha?: DateTimeFilter<"Deuda"> | Date | string
    created_at?: DateTimeFilter<"Deuda"> | Date | string
    updated_at?: DateTimeFilter<"Deuda"> | Date | string
  }

  export type DeudaOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    item?: SortOrder
    monto?: SortOrder
    fecha?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DeudaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DeudaWhereInput | DeudaWhereInput[]
    OR?: DeudaWhereInput[]
    NOT?: DeudaWhereInput | DeudaWhereInput[]
    tipo?: StringFilter<"Deuda"> | string
    item?: StringFilter<"Deuda"> | string
    monto?: DecimalFilter<"Deuda"> | Decimal | DecimalJsLike | number | string
    fecha?: DateTimeFilter<"Deuda"> | Date | string
    created_at?: DateTimeFilter<"Deuda"> | Date | string
    updated_at?: DateTimeFilter<"Deuda"> | Date | string
  }, "id">

  export type DeudaOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    item?: SortOrder
    monto?: SortOrder
    fecha?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: DeudaCountOrderByAggregateInput
    _avg?: DeudaAvgOrderByAggregateInput
    _max?: DeudaMaxOrderByAggregateInput
    _min?: DeudaMinOrderByAggregateInput
    _sum?: DeudaSumOrderByAggregateInput
  }

  export type DeudaScalarWhereWithAggregatesInput = {
    AND?: DeudaScalarWhereWithAggregatesInput | DeudaScalarWhereWithAggregatesInput[]
    OR?: DeudaScalarWhereWithAggregatesInput[]
    NOT?: DeudaScalarWhereWithAggregatesInput | DeudaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Deuda"> | number
    tipo?: StringWithAggregatesFilter<"Deuda"> | string
    item?: StringWithAggregatesFilter<"Deuda"> | string
    monto?: DecimalWithAggregatesFilter<"Deuda"> | Decimal | DecimalJsLike | number | string
    fecha?: DateTimeWithAggregatesFilter<"Deuda"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"Deuda"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Deuda"> | Date | string
  }

  export type TipoGastoItemWhereInput = {
    AND?: TipoGastoItemWhereInput | TipoGastoItemWhereInput[]
    OR?: TipoGastoItemWhereInput[]
    NOT?: TipoGastoItemWhereInput | TipoGastoItemWhereInput[]
    id?: StringFilter<"TipoGastoItem"> | string
    nombre?: StringFilter<"TipoGastoItem"> | string
    descripcion?: StringNullableFilter<"TipoGastoItem"> | string | null
  }

  export type TipoGastoItemOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
  }

  export type TipoGastoItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    nombre?: string
    AND?: TipoGastoItemWhereInput | TipoGastoItemWhereInput[]
    OR?: TipoGastoItemWhereInput[]
    NOT?: TipoGastoItemWhereInput | TipoGastoItemWhereInput[]
    descripcion?: StringNullableFilter<"TipoGastoItem"> | string | null
  }, "id" | "nombre">

  export type TipoGastoItemOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    _count?: TipoGastoItemCountOrderByAggregateInput
    _max?: TipoGastoItemMaxOrderByAggregateInput
    _min?: TipoGastoItemMinOrderByAggregateInput
  }

  export type TipoGastoItemScalarWhereWithAggregatesInput = {
    AND?: TipoGastoItemScalarWhereWithAggregatesInput | TipoGastoItemScalarWhereWithAggregatesInput[]
    OR?: TipoGastoItemScalarWhereWithAggregatesInput[]
    NOT?: TipoGastoItemScalarWhereWithAggregatesInput | TipoGastoItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TipoGastoItem"> | string
    nombre?: StringWithAggregatesFilter<"TipoGastoItem"> | string
    descripcion?: StringNullableWithAggregatesFilter<"TipoGastoItem"> | string | null
  }

  export type FormaPagoItemWhereInput = {
    AND?: FormaPagoItemWhereInput | FormaPagoItemWhereInput[]
    OR?: FormaPagoItemWhereInput[]
    NOT?: FormaPagoItemWhereInput | FormaPagoItemWhereInput[]
    id?: StringFilter<"FormaPagoItem"> | string
    nombre?: StringFilter<"FormaPagoItem"> | string
    descripcion?: StringNullableFilter<"FormaPagoItem"> | string | null
  }

  export type FormaPagoItemOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
  }

  export type FormaPagoItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    nombre?: string
    AND?: FormaPagoItemWhereInput | FormaPagoItemWhereInput[]
    OR?: FormaPagoItemWhereInput[]
    NOT?: FormaPagoItemWhereInput | FormaPagoItemWhereInput[]
    descripcion?: StringNullableFilter<"FormaPagoItem"> | string | null
  }, "id" | "nombre">

  export type FormaPagoItemOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    _count?: FormaPagoItemCountOrderByAggregateInput
    _max?: FormaPagoItemMaxOrderByAggregateInput
    _min?: FormaPagoItemMinOrderByAggregateInput
  }

  export type FormaPagoItemScalarWhereWithAggregatesInput = {
    AND?: FormaPagoItemScalarWhereWithAggregatesInput | FormaPagoItemScalarWhereWithAggregatesInput[]
    OR?: FormaPagoItemScalarWhereWithAggregatesInput[]
    NOT?: FormaPagoItemScalarWhereWithAggregatesInput | FormaPagoItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FormaPagoItem"> | string
    nombre?: StringWithAggregatesFilter<"FormaPagoItem"> | string
    descripcion?: StringNullableWithAggregatesFilter<"FormaPagoItem"> | string | null
  }

  export type CategoriaItemWhereInput = {
    AND?: CategoriaItemWhereInput | CategoriaItemWhereInput[]
    OR?: CategoriaItemWhereInput[]
    NOT?: CategoriaItemWhereInput | CategoriaItemWhereInput[]
    id?: StringFilter<"CategoriaItem"> | string
    codigo?: StringFilter<"CategoriaItem"> | string
    descripcion?: StringFilter<"CategoriaItem"> | string
  }

  export type CategoriaItemOrderByWithRelationInput = {
    id?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrder
  }

  export type CategoriaItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    codigo?: string
    AND?: CategoriaItemWhereInput | CategoriaItemWhereInput[]
    OR?: CategoriaItemWhereInput[]
    NOT?: CategoriaItemWhereInput | CategoriaItemWhereInput[]
    descripcion?: StringFilter<"CategoriaItem"> | string
  }, "id" | "codigo">

  export type CategoriaItemOrderByWithAggregationInput = {
    id?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrder
    _count?: CategoriaItemCountOrderByAggregateInput
    _max?: CategoriaItemMaxOrderByAggregateInput
    _min?: CategoriaItemMinOrderByAggregateInput
  }

  export type CategoriaItemScalarWhereWithAggregatesInput = {
    AND?: CategoriaItemScalarWhereWithAggregatesInput | CategoriaItemScalarWhereWithAggregatesInput[]
    OR?: CategoriaItemScalarWhereWithAggregatesInput[]
    NOT?: CategoriaItemScalarWhereWithAggregatesInput | CategoriaItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CategoriaItem"> | string
    codigo?: StringWithAggregatesFilter<"CategoriaItem"> | string
    descripcion?: StringWithAggregatesFilter<"CategoriaItem"> | string
  }

  export type GastoCreateInput = {
    concepto: string
    monto: Decimal | DecimalJsLike | number | string
    tipo_gasto: string
    forma_pago: string
    mes: string
    anio: number
    fecha_cargo: Date | string
    fecha_pago: Date | string
    categoria: string
    a_pagos?: boolean
    no_mens?: number
    total_meses?: number
    tag?: string
    se_divide?: boolean
    gasto_x_mes?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type GastoUncheckedCreateInput = {
    id?: number
    concepto: string
    monto: Decimal | DecimalJsLike | number | string
    tipo_gasto: string
    forma_pago: string
    mes: string
    anio: number
    fecha_cargo: Date | string
    fecha_pago: Date | string
    categoria: string
    a_pagos?: boolean
    no_mens?: number
    total_meses?: number
    tag?: string
    se_divide?: boolean
    gasto_x_mes?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type GastoUpdateInput = {
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tipo_gasto?: StringFieldUpdateOperationsInput | string
    forma_pago?: StringFieldUpdateOperationsInput | string
    mes?: StringFieldUpdateOperationsInput | string
    anio?: IntFieldUpdateOperationsInput | number
    fecha_cargo?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria?: StringFieldUpdateOperationsInput | string
    a_pagos?: BoolFieldUpdateOperationsInput | boolean
    no_mens?: IntFieldUpdateOperationsInput | number
    total_meses?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
    se_divide?: BoolFieldUpdateOperationsInput | boolean
    gasto_x_mes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GastoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tipo_gasto?: StringFieldUpdateOperationsInput | string
    forma_pago?: StringFieldUpdateOperationsInput | string
    mes?: StringFieldUpdateOperationsInput | string
    anio?: IntFieldUpdateOperationsInput | number
    fecha_cargo?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria?: StringFieldUpdateOperationsInput | string
    a_pagos?: BoolFieldUpdateOperationsInput | boolean
    no_mens?: IntFieldUpdateOperationsInput | number
    total_meses?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
    se_divide?: BoolFieldUpdateOperationsInput | boolean
    gasto_x_mes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GastoCreateManyInput = {
    id?: number
    concepto: string
    monto: Decimal | DecimalJsLike | number | string
    tipo_gasto: string
    forma_pago: string
    mes: string
    anio: number
    fecha_cargo: Date | string
    fecha_pago: Date | string
    categoria: string
    a_pagos?: boolean
    no_mens?: number
    total_meses?: number
    tag?: string
    se_divide?: boolean
    gasto_x_mes?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type GastoUpdateManyMutationInput = {
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tipo_gasto?: StringFieldUpdateOperationsInput | string
    forma_pago?: StringFieldUpdateOperationsInput | string
    mes?: StringFieldUpdateOperationsInput | string
    anio?: IntFieldUpdateOperationsInput | number
    fecha_cargo?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria?: StringFieldUpdateOperationsInput | string
    a_pagos?: BoolFieldUpdateOperationsInput | boolean
    no_mens?: IntFieldUpdateOperationsInput | number
    total_meses?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
    se_divide?: BoolFieldUpdateOperationsInput | boolean
    gasto_x_mes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GastoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tipo_gasto?: StringFieldUpdateOperationsInput | string
    forma_pago?: StringFieldUpdateOperationsInput | string
    mes?: StringFieldUpdateOperationsInput | string
    anio?: IntFieldUpdateOperationsInput | number
    fecha_cargo?: DateTimeFieldUpdateOperationsInput | Date | string
    fecha_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria?: StringFieldUpdateOperationsInput | string
    a_pagos?: BoolFieldUpdateOperationsInput | boolean
    no_mens?: IntFieldUpdateOperationsInput | number
    total_meses?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
    se_divide?: BoolFieldUpdateOperationsInput | boolean
    gasto_x_mes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceCreateInput = {
    tipo: string
    concepto: string
    monto: Decimal | DecimalJsLike | number | string
    deben_ser?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type BalanceUncheckedCreateInput = {
    id?: number
    tipo: string
    concepto: string
    monto: Decimal | DecimalJsLike | number | string
    deben_ser?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type BalanceUpdateInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deben_ser?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deben_ser?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceCreateManyInput = {
    id?: number
    tipo: string
    concepto: string
    monto: Decimal | DecimalJsLike | number | string
    deben_ser?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type BalanceUpdateManyMutationInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deben_ser?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deben_ser?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeudaCreateInput = {
    tipo: string
    item: string
    monto: Decimal | DecimalJsLike | number | string
    fecha: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DeudaUncheckedCreateInput = {
    id?: number
    tipo: string
    item: string
    monto: Decimal | DecimalJsLike | number | string
    fecha: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DeudaUpdateInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    item?: StringFieldUpdateOperationsInput | string
    monto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeudaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    item?: StringFieldUpdateOperationsInput | string
    monto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeudaCreateManyInput = {
    id?: number
    tipo: string
    item: string
    monto: Decimal | DecimalJsLike | number | string
    fecha: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DeudaUpdateManyMutationInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    item?: StringFieldUpdateOperationsInput | string
    monto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeudaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    item?: StringFieldUpdateOperationsInput | string
    monto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TipoGastoItemCreateInput = {
    id: string
    nombre: string
    descripcion?: string | null
  }

  export type TipoGastoItemUncheckedCreateInput = {
    id: string
    nombre: string
    descripcion?: string | null
  }

  export type TipoGastoItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TipoGastoItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TipoGastoItemCreateManyInput = {
    id: string
    nombre: string
    descripcion?: string | null
  }

  export type TipoGastoItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TipoGastoItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormaPagoItemCreateInput = {
    id: string
    nombre: string
    descripcion?: string | null
  }

  export type FormaPagoItemUncheckedCreateInput = {
    id: string
    nombre: string
    descripcion?: string | null
  }

  export type FormaPagoItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormaPagoItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormaPagoItemCreateManyInput = {
    id: string
    nombre: string
    descripcion?: string | null
  }

  export type FormaPagoItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormaPagoItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoriaItemCreateInput = {
    id: string
    codigo: string
    descripcion: string
  }

  export type CategoriaItemUncheckedCreateInput = {
    id: string
    codigo: string
    descripcion: string
  }

  export type CategoriaItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaItemCreateManyInput = {
    id: string
    codigo: string
    descripcion: string
  }

  export type CategoriaItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type GastoCountOrderByAggregateInput = {
    id?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    tipo_gasto?: SortOrder
    forma_pago?: SortOrder
    mes?: SortOrder
    anio?: SortOrder
    fecha_cargo?: SortOrder
    fecha_pago?: SortOrder
    categoria?: SortOrder
    a_pagos?: SortOrder
    no_mens?: SortOrder
    total_meses?: SortOrder
    tag?: SortOrder
    se_divide?: SortOrder
    gasto_x_mes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type GastoAvgOrderByAggregateInput = {
    id?: SortOrder
    monto?: SortOrder
    anio?: SortOrder
    no_mens?: SortOrder
    total_meses?: SortOrder
  }

  export type GastoMaxOrderByAggregateInput = {
    id?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    tipo_gasto?: SortOrder
    forma_pago?: SortOrder
    mes?: SortOrder
    anio?: SortOrder
    fecha_cargo?: SortOrder
    fecha_pago?: SortOrder
    categoria?: SortOrder
    a_pagos?: SortOrder
    no_mens?: SortOrder
    total_meses?: SortOrder
    tag?: SortOrder
    se_divide?: SortOrder
    gasto_x_mes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type GastoMinOrderByAggregateInput = {
    id?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    tipo_gasto?: SortOrder
    forma_pago?: SortOrder
    mes?: SortOrder
    anio?: SortOrder
    fecha_cargo?: SortOrder
    fecha_pago?: SortOrder
    categoria?: SortOrder
    a_pagos?: SortOrder
    no_mens?: SortOrder
    total_meses?: SortOrder
    tag?: SortOrder
    se_divide?: SortOrder
    gasto_x_mes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type GastoSumOrderByAggregateInput = {
    id?: SortOrder
    monto?: SortOrder
    anio?: SortOrder
    no_mens?: SortOrder
    total_meses?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BalanceCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    deben_ser?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type BalanceAvgOrderByAggregateInput = {
    id?: SortOrder
    monto?: SortOrder
    deben_ser?: SortOrder
  }

  export type BalanceMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    deben_ser?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type BalanceMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    concepto?: SortOrder
    monto?: SortOrder
    deben_ser?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type BalanceSumOrderByAggregateInput = {
    id?: SortOrder
    monto?: SortOrder
    deben_ser?: SortOrder
  }

  export type DeudaCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    item?: SortOrder
    monto?: SortOrder
    fecha?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DeudaAvgOrderByAggregateInput = {
    id?: SortOrder
    monto?: SortOrder
  }

  export type DeudaMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    item?: SortOrder
    monto?: SortOrder
    fecha?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DeudaMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    item?: SortOrder
    monto?: SortOrder
    fecha?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DeudaSumOrderByAggregateInput = {
    id?: SortOrder
    monto?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TipoGastoItemCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type TipoGastoItemMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type TipoGastoItemMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FormaPagoItemCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type FormaPagoItemMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type FormaPagoItemMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type CategoriaItemCountOrderByAggregateInput = {
    id?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrder
  }

  export type CategoriaItemMaxOrderByAggregateInput = {
    id?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrder
  }

  export type CategoriaItemMinOrderByAggregateInput = {
    id?: SortOrder
    codigo?: SortOrder
    descripcion?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use GastoDefaultArgs instead
     */
    export type GastoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GastoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BalanceDefaultArgs instead
     */
    export type BalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BalanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DeudaDefaultArgs instead
     */
    export type DeudaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DeudaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TipoGastoItemDefaultArgs instead
     */
    export type TipoGastoItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TipoGastoItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FormaPagoItemDefaultArgs instead
     */
    export type FormaPagoItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormaPagoItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaItemDefaultArgs instead
     */
    export type CategoriaItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaItemDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}